<?xml version="1.0" encoding="UTF-8"?>
<addon id="AnswerFlowController">
    <properties>
    </properties>
    <dependencies>
        <jsDependency>
            <javaScript name="MessageBoxRemake" version="1.5.2"/>
        </jsDependency>
    </dependencies>
    <css>
    </css>
    <view><![CDATA[<div class=dialog_container></div><div class=submiiter_container></div>]]></view>
    <presenter><![CDATA[/*! For license information please see AddonAnswerFlowController_create.js.LICENSE */
window["AddonAnswerFlowController_create"] = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports, Symbol.toStringTag, {
                value: "Module"
            });
        }
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    };
    __webpack_require__.t = function(value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", {
            enumerable: true,
            value: value
        });
        if (mode & 2 && typeof value != "string") for (var key in value) __webpack_require__.d(ns, key, function(key) {
            return value[key];
        }.bind(null, key));
        return ns;
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module["default"];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = "./presenters/AnswerFlowController/src/presenter.ts");
}({
    "./presenters/AnswerFlowController/src/AnswerFlowControlObject.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var AnswerFlowControlObject = function() {
            function AnswerFlowControlObject(context) {
                this.mContext = context;
            }
            AnswerFlowControlObject.prototype.isUnderControl = function() {
                return false;
            };
            AnswerFlowControlObject.prototype.beforePresenterRun = function(interfaceName, metaInfo, service) {};
            AnswerFlowControlObject.prototype.afterPresenterRun = function(interfaceName, metaInfo, service) {
                switch (interfaceName) {
                  case "IInteractionQuestion":
                    this.mContext.QuestionOperate.pushService(service);
                    switch (this.mContext.State.questionState) {
                      case ConstVar_1.QUESTION_STATE_CODE.FINISH:
                      case ConstVar_1.QUESTION_STATE_CODE.CAN_MODIFY:
                        if (!this.locked) {
                            try {
                                this.locked = this.mContext.QuestionOperate.changeState({
                                    lockQuestion: {},
                                    finishQuestion: {}
                                });
                            } catch (e) {
                                this.mContext.Logger.warn(e);
                            }
                        }
                    }
                    break;

                  case "ISubmitButton":
                    this.mContext.SubmitButtonOperate.setService(service);
                    break;

                  case "ITimerService":
                    this.mContext.TimerOperate.setService(service);
                    break;

                  case "IAnswerIntercept":
                    this.mContext.AnswerInterceptOperate.pushService(service);
                    break;

                  case "IExerciseOperate":
                    this.mContext.ExerciseOperate.pushService(service);
                    break;
                }
            };
            AnswerFlowControlObject.prototype.afterSetLayoutService = function(service) {
                switch (this.mContext.State.questionState) {
                  case ConstVar_1.QUESTION_STATE_CODE.FINISH:
                  case ConstVar_1.QUESTION_STATE_CODE.CAN_MODIFY:
                    try {
                        this.locked = this.mContext.QuestionOperate.changeState({
                            lockQuestion: {},
                            finishQuestion: {}
                        });
                    } catch (e) {
                        this.mContext.Logger.warn(e);
                    }
                    break;
                }
            };
            AnswerFlowControlObject.prototype.getInterfaceMethods = function() {
                var interfaces = [];
                var SubmitButton = {
                    name: undefined,
                    methods: []
                }, InteractionQuestion = {
                    name: undefined,
                    methods: []
                }, AnswerIntercept = {
                    name: undefined,
                    methods: []
                }, ExerciseOperate = {
                    name: undefined,
                    methods: []
                }, TimerService = {
                    name: undefined,
                    methods: []
                };
                InteractionQuestion.name = "IInteractionQuestion";
                InteractionQuestion.methods = [ "getQuestionInfo", "showAnswer", "getResult", "lockQuestion", "unlockQuestion", "finishQuestion", "resetQuestion", "showResultHint" ];
                SubmitButton.name = "ISubmitButton";
                SubmitButton.methods = [ "setButtonState", "getButtonState", "setVisible" ];
                AnswerIntercept.name = "IAnswerIntercept";
                AnswerIntercept.methods = [ "getInterceptId", "beforeSendAnswer", "afterSendAnswer" ];
                TimerService.name = "ITimerService";
                TimerService.methods = [ "start", "pause", "stop", "getTimeValue" ];
                ExerciseOperate.name = "IExerciseOperate";
                ExerciseOperate.methods = [ "getExerciseData" ];
                interfaces.push(InteractionQuestion);
                interfaces.push(SubmitButton);
                interfaces.push(AnswerIntercept);
                interfaces.push(TimerService);
                interfaces.push(ExerciseOperate);
                return interfaces;
            };
            return AnswerFlowControlObject;
        }();
        exports.default = AnswerFlowControlObject;
    },
    "./presenters/AnswerFlowController/src/ControllerState.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var ControllerState = function() {
            function ControllerState(controller) {
                this.mContext = controller;
                this._questionState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                this._submitSuccess = false;
                this._submittedAnswer = {};
                this._isTimeUp = false;
            }
            Object.defineProperty(ControllerState.prototype, "questionState", {
                get: function() {
                    var state = this.mContext.SubmitButtonOperate.getButtonState();
                    if (state) {
                        this._questionState = state;
                    }
                    return this._questionState;
                },
                set: function(val) {
                    this._questionState = val;
                    this.mContext.SubmitButtonOperate.setButtonState(val);
                    this.mContext.QuestionMode.commit(ConstVar_1.INTERNAL_EVENT_NAME.QUESTION_STATUS_CHANGE, val);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerState.prototype, "submitSuccess", {
                get: function() {
                    return this._submitSuccess;
                },
                set: function(val) {
                    this._submitSuccess = val;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerState.prototype, "isTimeUp", {
                get: function() {
                    return this._isTimeUp;
                },
                set: function(val) {
                    this._isTimeUp = val;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerState.prototype, "submittedAnswer", {
                get: function() {
                    return this._submittedAnswer;
                },
                set: function(val) {
                    this._submittedAnswer = val;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerState.prototype, "submittedSpendTime", {
                get: function() {
                    return this._submittedSpendTime;
                },
                set: function(val) {
                    this._submittedSpendTime = val;
                },
                enumerable: true,
                configurable: true
            });
            ControllerState.prototype.getState = function() {
                return {
                    submittedAnswer: this._submittedAnswer,
                    submittedSpendTime: this._submittedSpendTime,
                    submitSuccess: this._submitSuccess,
                    questionState: this._questionState,
                    isTimeUp: this._isTimeUp
                };
            };
            ControllerState.prototype.setState = function(data) {
                var _this = this;
                if (typeof data.submitSuccess !== typeof undefined) {
                    this._submitSuccess = data.submitSuccess;
                }
                if (typeof data.submittedAnswer !== typeof undefined) {
                    this._submittedAnswer = data.submittedAnswer;
                }
                if (typeof data.questionState !== typeof undefined) {
                    this._questionState = data.questionState;
                    if (data.questionState === ConstVar_1.QUESTION_STATE_CODE.SUBMITTING) {
                        this._questionState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                        this.mContext.addEventListener("PresenterLoaded", ConstVar_1.EVENT_TYPE.IC_PLAYER_EVENT, (function() {
                            _this.mContext.QuestionOperate.unLock();
                        }));
                    }
                }
                if (typeof data.isTimeUp !== typeof undefined) {
                    this._isTimeUp = data.isTimeUp;
                }
                if (typeof data.submittedSpendTime !== typeof undefined) {
                    this._submittedSpendTime = data.submittedSpendTime;
                }
            };
            return ControllerState;
        }();
        exports.default = ControllerState;
    },
    "./presenters/AnswerFlowController/src/ServiceObject.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var ClassroomStatus_1 = __webpack_require__("./presenters/AnswerFlowController/src/services/ClassroomStatus.ts");
        var ServiceObject = function() {
            function ServiceObject(context) {
                this.mContext = context;
                this.classroomStatus = new ClassroomStatus_1.default(this.mContext);
            }
            ServiceObject.prototype.showAnswer = function() {
                this.mContext.QuestionOperate.showAnswer("");
            };
            ServiceObject.prototype.onTimeOver = function(timeSpend) {
                this.mContext.Logger.debug("时间结束,开始收集答案");
                this.mContext.State.isTimeUp = true;
                this.mContext.QuestionMode.commit(ConstVar_1.INTERNAL_EVENT_NAME.TIME_UP);
            };
            ServiceObject.prototype.getState = function() {
                return this.mContext.State.getState();
            };
            ServiceObject.prototype.setState = function(val) {
                this.mContext.State.setState(val);
            };
            ServiceObject.prototype.getClassroomStatus = function() {
                return this.classroomStatus.getClassroomStatus();
            };
            ServiceObject.prototype.setClassroomStatus = function(status) {
                this.classroomStatus.setClassroomStatus(status);
            };
            ServiceObject.prototype.clearClassroomStatus = function() {
                this.classroomStatus.clearClassroomStatus();
            };
            return ServiceObject;
        }();
        exports.default = ServiceObject;
    },
    "./presenters/AnswerFlowController/src/flows/AnswerStateSyncFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var EVENT_NAMES = {
            QUESTION_ANSWER_CHANGE: "onAnswerStateChanged",
            QUESTION_ANSWER_REQUEST: "getAnswerState",
            SEND_ANSWER_TO_CALLER: "sendAnswerStateToCaller",
            REQUEST_ANSWER_FROM_CALLER: "getCallerAnswerState",
            REQUEST_ANSWER_FROM_CALLER_CALLBACK: "getCallerAnswerStateCallback"
        };
        var INJECT_NAMES = {
            SEND_ANSWER_TO_CALLER: "sendAnswerStateToCaller",
            REQUEST_ANSWER_FROM_CALLER: "getCallerAnswerState"
        };
        var postMessageToParent = function(type, data) {
            return window.parent.postMessage({
                type: type,
                data: data
            }, "*");
        };
        var AnswerStateSyncFlow = function(_super) {
            __extends(AnswerStateSyncFlow, _super);
            function AnswerStateSyncFlow(mode) {
                var _this = _super.call(this, mode, [ {
                    name: EVENT_NAMES.QUESTION_ANSWER_CHANGE
                }, {
                    name: EVENT_NAMES.QUESTION_ANSWER_REQUEST
                }, {
                    name: EVENT_NAMES.REQUEST_ANSWER_FROM_CALLER_CALLBACK,
                    type: ConstVar_1.EVENT_TYPE.NATIVE_EVENT
                } ]) || this;
                _this.setDefaultInjectCallback();
                var inter = _this.mContext.Interface;
                if (inter) {
                    inter["setCallbackList"] = function(injector) {
                        return _this.setInjectCallback(injector);
                    };
                }
                return _this;
            }
            AnswerStateSyncFlow.prototype.destroy = function() {
                if (this.onReceiveMessage) {
                    window.removeEventListener("message", this.onReceiveMessage);
                }
                delete this.onReceiveMessage;
                delete this.injectorCallbacks;
            };
            AnswerStateSyncFlow.prototype.execute = function(eventData, eventName) {
                switch (eventName) {
                  case EVENT_NAMES.QUESTION_ANSWER_CHANGE:
                    this.onAnswerChange(eventData);
                    break;

                  case EVENT_NAMES.QUESTION_ANSWER_REQUEST:
                    this.onAnswerRequest(eventData);
                    break;

                  case EVENT_NAMES.REQUEST_ANSWER_FROM_CALLER_CALLBACK:
                  default:
                    this.onAnswerReceive(eventData);
                    break;
                }
            };
            AnswerStateSyncFlow.prototype.onAnswerChange = function(data) {
                return __awaiter(this, void 0, void 0, (function() {
                    var answer, eventData;
                    return __generator(this, (function(_a) {
                        switch (_a.label) {
                          case 0:
                            this.logger.info("onAnswerChange", data);
                            return [ 4, this.mContext.QuestionOperate.getAnswer() ];

                          case 1:
                            answer = _a.sent();
                            if (answer) {
                                eventData = JSON.parse(JSON.stringify(answer));
                                try {
                                    this.mContext.dispatchEvent(EVENT_NAMES.SEND_ANSWER_TO_CALLER, ConstVar_1.EVENT_TYPE.NATIVE_EVENT, eventData);
                                } catch (e) {
                                    this.logger.error(e);
                                }
                                this.injectorCallbacks[INJECT_NAMES.SEND_ANSWER_TO_CALLER](eventData);
                            }
                            return [ 2 ];
                        }
                    }));
                }));
            };
            AnswerStateSyncFlow.prototype.onAnswerRequest = function(data) {
                return __awaiter(this, void 0, void 0, (function() {
                    var res;
                    return __generator(this, (function(_a) {
                        switch (_a.label) {
                          case 0:
                            this.logger.info("onAnswerRequest", data);
                            try {
                                this.mContext.dispatchEvent(EVENT_NAMES.REQUEST_ANSWER_FROM_CALLER, ConstVar_1.EVENT_TYPE.NATIVE_EVENT, data);
                            } catch (e) {
                                this.logger.error(e);
                            }
                            return [ 4, this.injectorCallbacks[INJECT_NAMES.REQUEST_ANSWER_FROM_CALLER](data) ];

                          case 1:
                            res = _a.sent();
                            if (res) {
                                this.onAnswerReceive(res);
                            }
                            return [ 2 ];
                        }
                    }));
                }));
            };
            AnswerStateSyncFlow.prototype.onAnswerReceive = function(data) {
                this.logger.info("onAnswerReceive", data);
                if (data && data.questionId === this.mContext.QuestionOperate.getInfo().id) {
                    this.mContext.QuestionOperate.showAnswer("user", data);
                }
            };
            AnswerStateSyncFlow.prototype.setDefaultInjectCallback = function() {
                var _this = this;
                var _a;
                this.injectorCallbacks = (_a = {}, _a[INJECT_NAMES.SEND_ANSWER_TO_CALLER] = function(data) {
                    postMessageToParent(EVENT_NAMES.SEND_ANSWER_TO_CALLER, data);
                }, _a[INJECT_NAMES.REQUEST_ANSWER_FROM_CALLER] = function(data) {
                    if (!_this.onReceiveMessage) {
                        _this.onReceiveMessage = function(event) {
                            var data = event["data"];
                            if (data && data.type === EVENT_NAMES.REQUEST_ANSWER_FROM_CALLER_CALLBACK) {
                                _this.onAnswerReceive(data.data);
                            }
                        };
                        window.addEventListener("message", _this.onReceiveMessage);
                    }
                    postMessageToParent(EVENT_NAMES.REQUEST_ANSWER_FROM_CALLER, data);
                }, _a);
            };
            AnswerStateSyncFlow.prototype.setInjectCallback = function(injector) {
                var _this = this;
                if (injector) {
                    var validInjectors = Object.keys(INJECT_NAMES).map((function(item) {
                        return INJECT_NAMES[item];
                    }));
                    var matched_1 = true;
                    validInjectors.forEach((function(item) {
                        if (typeof injector[item] !== "function") {
                            matched_1 = false;
                        }
                    }));
                    if (matched_1) {
                        validInjectors.forEach((function(item) {
                            return _this.injectorCallbacks[item] = injector[item];
                        }));
                        this.setInjectCallback = function(injector) {};
                    }
                }
            };
            return AnswerStateSyncFlow;
        }(BaseFlow_1.default);
        exports.default = AnswerStateSyncFlow;
    },
    "./presenters/AnswerFlowController/src/flows/BaseFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow = function() {
            function BaseFlow(mode, events) {
                this.mMode = mode;
                this.events = events;
                this.mContext = mode.getContext();
                this.logger = this.mContext.Logger;
                this.flowState = mode.getFlowState();
                this.attachEvents();
            }
            BaseFlow.prototype.attachEvents = function() {
                var that = this;
                var mContext = this.mContext;
                var name;
                var type;
                this.events.forEach((function(item, index) {
                    name = item.name;
                    type = item.type || ConstVar_1.EVENT_TYPE.IC_PLAYER_EVENT;
                    if (type === ConstVar_1.EVENT_TYPE.IC_PLAYER_EVENT || type === ConstVar_1.EVENT_TYPE.NATIVE_EVENT || type === ConstVar_1.EVENT_TYPE.PPT_NATIVE_EVENT) {
                        mContext.addEventListener(name, type, (function(eventData, eventName) {
                            that.execute(eventData, eventName);
                        }));
                    } else if (type === ConstVar_1.EVENT_TYPE.INTERNAL) {
                        that.mMode.getBus().register(name, (function(eventName, eventData) {
                            that.execute(eventData, eventName);
                        }));
                    }
                }));
            };
            BaseFlow.prototype.destroy = function() {};
            return BaseFlow;
        }();
        exports.default = BaseFlow;
    },
    "./presenters/AnswerFlowController/src/flows/EmbeddedQuestionStateFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var EmbeddedQuestionStateFlow = function(_super) {
            __extends(EmbeddedQuestionStateFlow, _super);
            function EmbeddedQuestionStateFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.EMBEDDED_QUESTION_STATE_CHANGE
                } ]) || this;
            }
            EmbeddedQuestionStateFlow.prototype.execute = function(eventData, eventName) {
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.EMBEDDED_QUESTION_STATE_CHANGE) {
                    this.onEmbeddedQuestionStateChanged(eventData);
                }
            };
            EmbeddedQuestionStateFlow.prototype.onEmbeddedQuestionStateChanged = function(eventData) {
                if (!eventData) {
                    return;
                }
                var status = this.mContext.State.questionState;
                if (status == ConstVar_1.QUESTION_STATE_CODE.CAN_NOT_SUBMIT && eventData.canSubmit) {
                    status = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                } else if (status == ConstVar_1.QUESTION_STATE_CODE.MODIFY_SUBMIT) {
                    if (!eventData.canSubmit) {
                        this.mContext.QuestionOperate.unLock();
                    }
                    if (eventData.answerChange !== false) {
                        status = ConstVar_1.QUESTION_STATE_CODE.RETRY_SUBMIT;
                    }
                }
                this.mContext.State.questionState = status;
            };
            return EmbeddedQuestionStateFlow;
        }(BaseFlow_1.default);
        exports.default = EmbeddedQuestionStateFlow;
    },
    "./presenters/AnswerFlowController/src/flows/ExerciseStateChangeFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var ExerciseStateChangeFlow = function(_super) {
            __extends(ExerciseStateChangeFlow, _super);
            function ExerciseStateChangeFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_STATE_CHANGE
                } ]) || this;
            }
            ExerciseStateChangeFlow.prototype.execute = function(eventData, eventName) {
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_STATE_CHANGE) {
                    this.onExerciseStateChanged(eventData);
                }
            };
            ExerciseStateChangeFlow.prototype.onExerciseStateChanged = function(eventData) {
                switch (eventData.type) {
                  case "start":
                    this.onExerciseStart(eventData.value);
                    break;

                  case "stop":
                    this.onExerciseStop(eventData.value);
                    break;

                  case "exit":
                    this.onExerciseExit(eventData.value);
                    break;

                  case "mockStop":
                    if (eventData.value.result == true) {
                        this.mContext.TimerOperate.pause(false);
                    }
                    break;

                  case "mockStart":
                    if (eventData.value.result == true) {
                        this.mContext.TimerOperate.pause(false);
                    }
                    break;

                  default:
                    this.logger.debug("未知的随堂练习状态变更数据：" + JSON.stringify(eventData));
                    break;
                }
            };
            ExerciseStateChangeFlow.prototype.onExerciseStart = function(data) {
                var timerOperate = this.mContext.TimerOperate;
                if (data.result == false) {
                    this.logger.info("发送题目失败!");
                    timerOperate.start(false);
                } else {
                    this.mContext.SubmitButtonOperate.setVisible(false);
                    this.mContext.QuestionOperate.changeState({
                        lockQuestion: {},
                        resetQuestion: {
                            type: "OnSend"
                        }
                    });
                    timerOperate.stop();
                    timerOperate.start(true, data.startTimestamp);
                    this.mContext.LayoutService.adjustLayoutForStartAnswer();
                }
            };
            ExerciseStateChangeFlow.prototype.onExerciseStop = function(data) {
                if (data.result == false) {
                    this.logger.info("结束题目失败!");
                    this.mContext.TimerOperate.start(false);
                } else {
                    this.logger.debug("结束练习,锁定题目");
                    this.mContext.TimerOperate.stop();
                    this.mContext.QuestionOperate.unLock();
                }
            };
            ExerciseStateChangeFlow.prototype.onExerciseExit = function(data) {
                this.mContext.QuestionOperate.changeState({
                    unlockQuestion: {},
                    resetQuestion: {},
                    finishQuestion: {}
                });
                this.mContext.SubmitButtonOperate.setVisible(true);
                this.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                this.mContext.TimerOperate.stop();
                this.mContext.TimerOperate.start(false);
                this.mContext.LayoutService.adjustLayoutForEndAnswer();
            };
            return ExerciseStateChangeFlow;
        }(BaseFlow_1.default);
        exports.default = ExerciseStateChangeFlow;
    },
    "./presenters/AnswerFlowController/src/flows/QuestionStateFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var Tracker_1 = __webpack_require__("./presenters/AnswerFlowController/src/tracker/Tracker.ts");
        var EventID_1 = __webpack_require__("./presenters/AnswerFlowController/src/tracker/EventID.ts");
        var QuestionStateFlow = function(_super) {
            __extends(QuestionStateFlow, _super);
            function QuestionStateFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.QUESTION_STATE_CHANGE
                } ]) || this;
            }
            QuestionStateFlow.prototype.execute = function(eventData, eventName) {
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.QUESTION_STATE_CHANGE) {
                    this.onQuestionStateChange(eventData);
                    if (eventData.linkQuestionId && eventData.canSubmit === false && eventData.answerChange === false) {
                        var mContext = this.mContext;
                        var questionInfo = mContext.questionOperate.mainService.getQuestionInfo();
                        var examInfoStr = localStorage.getItem("ExamInfo");
                        var exercise_data = {};
                        if (!!examInfoStr) {
                            var examInfo = JSON.parse(examInfoStr);
                            exercise_data = {
                                exercise_id: examInfo.questionId || "",
                                exercise_type: examInfo.questionType || "",
                                exercise_mode: examInfo.exerciseMode || ""
                            };
                        }
                        Tracker_1.track({
                            id: EventID_1.getEventId(EventID_1.EVENT_OFFSET_ID.MODIFY_QUESTION),
                            data: {
                                id: questionInfo.id,
                                begin_time: Tracker_1.getTime(),
                                exercise_data: exercise_data
                            }
                        });
                    }
                }
            };
            QuestionStateFlow.prototype.onQuestionStateChange = function(ev) {
                if (!ev) {
                    return;
                }
                if (ev.linkQuestionId && this.mContext.Option.questionId) {
                    if (ev.linkQuestionId != this.mContext.Option.questionId) {
                        return;
                    }
                }
                var status = this.mContext.State.questionState;
                if (status == ConstVar_1.QUESTION_STATE_CODE.CAN_NOT_SUBMIT && ev.canSubmit) {
                    status = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                } else if (status == ConstVar_1.QUESTION_STATE_CODE.MODIFY_SUBMIT) {
                    if (!ev.canSubmit) {
                        this.mContext.QuestionOperate.unLock();
                    }
                    if (ev.answerChange !== false) {
                        status = ConstVar_1.QUESTION_STATE_CODE.RETRY_SUBMIT;
                    }
                }
                this.mContext.State.questionState = status;
            };
            return QuestionStateFlow;
        }(BaseFlow_1.default);
        exports.default = QuestionStateFlow;
    },
    "./presenters/AnswerFlowController/src/flows/SendAnswerToNativeFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var SendAnswerToNativeFlow = function(_super) {
            __extends(SendAnswerToNativeFlow, _super);
            function SendAnswerToNativeFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.GET_QUESTION_ANSWER,
                    type: ConstVar_1.EVENT_TYPE.NATIVE_EVENT
                }, {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.SEND_QUESTION_ANSWER_TOCALLER,
                    type: ConstVar_1.EVENT_TYPE.IC_PLAYER_EVENT
                } ]) || this;
            }
            SendAnswerToNativeFlow.prototype.execute = function(eventData, eventName) {
                var that = this;
                if (typeof eventData === "string") {
                    try {
                        eventData = JSON.parse(eventData.trim());
                    } catch (e) {}
                }
                var resultArgs = eventData ? eventData.resultArgs : {};
                var answerPromise = this.mContext.QuestionOperate.getAnswer(resultArgs);
                answerPromise.done((function(answer) {
                    try {
                        that.mContext.dispatchEvent(ConstVar_1.CLASSROOM_EVENT_NAME.GET_QUESTION_ANSWER_CALLBACK, ConstVar_1.EVENT_TYPE.NATIVE_EVENT, answer);
                    } catch (e) {
                        that.mContext.Logger.warn(e);
                    }
                    player.getController().getPlayerEvent().dispatch(ConstVar_1.CLASSROOM_EVENT_NAME.GET_QUESTION_ANSWER_CALLBACK, answer);
                }));
            };
            return SendAnswerToNativeFlow;
        }(BaseFlow_1.default);
        exports.default = SendAnswerToNativeFlow;
    },
    "./presenters/AnswerFlowController/src/flows/StatusRecoverFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var StatusRecoverFlow = function(_super) {
            __extends(StatusRecoverFlow, _super);
            function StatusRecoverFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.CR_STATUS_STATICAL
                } ]) || this;
            }
            StatusRecoverFlow.prototype.execute = function(eventData, eventName) {
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.CR_STATUS_STATICAL) {
                    this.onStatical(eventData);
                }
            };
            StatusRecoverFlow.prototype.onStatical = function(ev) {
                this.mContext.QuestionMode.hideToolbar();
            };
            return StatusRecoverFlow;
        }(BaseFlow_1.default);
        exports.default = StatusRecoverFlow;
    },
    "./presenters/AnswerFlowController/src/flows/StuExerciseStateChangeFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var PopFactory_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/PopFactory.ts");
        var StuExerciseStateChangeFlow = function(_super) {
            __extends(StuExerciseStateChangeFlow, _super);
            function StuExerciseStateChangeFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_STATE_CHANGE
                } ]) || this;
            }
            StuExerciseStateChangeFlow.prototype.execute = function(eventData, eventName) {
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_STATE_CHANGE) {
                    this.onExerciseStateChanged(eventData);
                }
            };
            StuExerciseStateChangeFlow.prototype.onExerciseStateChanged = function(eventData) {
                switch (eventData.type) {
                  case "start":
                    break;

                  case "stop":
                    break;

                  case "exit":
                    break;

                  case "redo":
                    PopFactory_1.PopFactory.get("submitter").hide();
                    break;

                  case "mockStop":
                    break;

                  case "mockStart":
                    break;

                  default:
                    this.logger.debug("未知的随堂练习状态变更数据：" + JSON.stringify(eventData));
                    break;
                }
            };
            return StuExerciseStateChangeFlow;
        }(BaseFlow_1.default);
        exports.default = StuExerciseStateChangeFlow;
    },
    "./presenters/AnswerFlowController/src/flows/StuFinishFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var PopFactory_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/PopFactory.ts");
        var Submit_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/common/Submit.ts");
        var FlowState_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/FlowState.ts");
        var media_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/media.ts");
        var ConstVar_2 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var StuFinishFlow = function(_super) {
            __extends(StuFinishFlow, _super);
            function StuFinishFlow(mode) {
                var _this = _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_STOP
                }, {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_CALLBACK
                }, {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_STATE_CHANGE
                }, {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.EXAM_CALL_BACK,
                    type: ConstVar_2.EVENT_TYPE.NATIVE_EVENT
                } ]) || this;
                _this.cartoonShow = false;
                _this.sendData = null;
                mode.getContext().addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.SUBMIT_APPLY_IFNEEDED, ConstVar_2.EVENT_TYPE.NATIVE_EVENT, (function(eventData, eventName) {
                    if (_this.mContext.State.submitSuccess === false) {
                        console.log(" ================== SUBMIT_APPLY =================");
                        ClassroomUtils.sendNativeEvent(ConstVar_1.CLASSROOM_EVENT_NAME.SUBMIT_APPLY, "{}", false);
                    }
                }));
                return _this;
            }
            StuFinishFlow.prototype.execute = function(eventData, eventName) {
                console.log(" =============== execute =================", JSON.stringify(eventName) + " :::: " + JSON.stringify(eventData));
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_STOP) {
                    this.onFinish(eventData);
                } else if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_CALLBACK) {
                    this.onQuestionSubmitCallback(eventData);
                } else if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_STATE_CHANGE && eventData.type === "result") {
                    if (this.mContext.State.submitSuccess === false) {
                        console.log(" ================== SUBMIT_APPLY =================");
                        ClassroomUtils.sendNativeEvent(ConstVar_1.CLASSROOM_EVENT_NAME.SUBMIT_APPLY, "{}", false);
                    }
                } else if (eventData && eventData.type && eventData.type === ConstVar_1.CLASSROOM_EVENT_NAME.SUBMIT_APPLY) {
                    console.log(" =============== SUBMIT_APPLY CALLBACK =================", eventData);
                    if (eventData.value.result === true) {
                        console.log(" =============== SUBMIT_APPLY CALLBACK 提交答案=================", this.sendData);
                        this.mContext.dispatchEvent(ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, this.sendData);
                    }
                    this.sendData = null;
                }
            };
            StuFinishFlow.prototype.onQuestionSubmitCallback = function(data) {
                this.logger.debug("performance", "收到提交答案回调");
                if (data.item == "nosubmit" || this.flowState.submitTrigger !== FlowState_1.default.SUBMIT_TYPE_FINISH) {
                    return;
                }
                if (!this.cartoonShow) {
                    PopFactory_1.PopFactory.get("mulMsgRmk").hide();
                }
                this.cartoonShow = false;
                if (data && data.value && data.value.result === true) {
                    this.mContext.State.submitSuccess = true;
                }
                this.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.FINISH;
                this.mContext.AnswerInterceptOperate.afterSendAnswer(data.value);
            };
            StuFinishFlow.prototype.onFinish = function(data) {
                this.logger.debug("performance", "收到结束练习事件");
                if (!this.cartoonShow) {
                    PopFactory_1.PopFactory.get("mulMsgRmk").hide();
                }
                this.cartoonShow = false;
                this.flowState.submitTrigger = FlowState_1.default.SUBMIT_TYPE_FINISH;
                this.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.FINISH;
                if (data.value && data.value.stopTimestamp > 0) {
                    this.mContext.TimerOperate.setTimeValue(data.value.stopTimestamp);
                }
                this.mContext.TimerOperate.stop();
                if (data.isForceStop) {
                    return;
                }
                this.finishAnswer();
                PopFactory_1.PopFactory.get("submitter").show({
                    showMsg: true
                });
            };
            StuFinishFlow.prototype.finishAnswer = function() {
                var _this = this;
                this.mContext.TimerOperate.stop();
                var state = this.mContext.State;
                var submitSuccess = state.submitSuccess;
                this.mContext.QuestionOperate.lock({
                    type: "OnFinish"
                });
                this.logger.debug("performance", "结束作答，开始获取、提交答案；是否主动提及过：" + submitSuccess);
                if (submitSuccess) {
                    this.finishAnswerHandler(state.submittedAnswer, state.submittedSpendTime);
                } else {
                    Submit_1.Submit.onSubmit.call(this, (function(questionAnswer, spendTime) {
                        _this.logger.debug("performance", "获取到题目答案");
                        _this.finishAnswerHandler(questionAnswer, spendTime);
                    }));
                }
            };
            StuFinishFlow.prototype.finishAnswerHandler = function(questionAnswer, spendTime) {
                var state = this.mContext.State;
                var submitSuccess = state.submitSuccess;
                if (questionAnswer === undefined) {
                    this.logger.debug("获取不到questionType和questionAnswer，无法提交答案");
                    return;
                }
                var hasOperate = questionAnswer.answerState === true || questionAnswer.answerState !== "NO_ANSWER";
                var sendData = {
                    questionId: questionAnswer.questionId,
                    answer: "",
                    spendTime: 0,
                    notSubmit: false
                };
                if (!hasOperate || submitSuccess) {
                    sendData.notSubmit = true;
                } else {
                    sendData.spendTime = spendTime;
                    sendData.answer = questionAnswer.answer;
                }
                if (!submitSuccess) {
                    this.mContext.State.submittedAnswer = questionAnswer;
                    this.mContext.State.submittedSpendTime = spendTime;
                }
                this.mContext.AnswerInterceptOperate.beforeSendAnswer(sendData);
                this.mContext.dispatchEvent(ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, sendData);
                this.sendData = sendData;
                this.logger.debug("performance", "互动题型控制器：提交答案请求发送结束", sendData);
                media_1.resetMedia();
                media_1.lockMedia();
                var showResultHint = false;
                if (!(this.mContext.Option.showResultOnSubmit == true && state.submitSuccess == false)) {
                    this.mContext.QuestionOperate.showAnswer("user", this.mContext.State.submittedAnswer);
                }
                if (submitSuccess == true) {} else {
                    if (this.mContext.Option.showResultOnSubmit == true) {
                        showResultHint = true;
                    }
                }
                if (this.mContext.Option.showResultOnFinish == true) {
                    showResultHint = true;
                }
                if (showResultHint) {
                    var pop = {
                        type: "cartoonError",
                        text: this.mContext.getLangText("answer_wrong")
                    };
                    if (questionAnswer.answer.answer_result === true) {
                        pop = {
                            type: "cartoonRight",
                            text: this.mContext.getLangText("answer_right")
                        };
                    }
                    PopFactory_1.PopFactory.get("mulMsgRmk").show(pop);
                    this.cartoonShow = true;
                }
                this.logger.debug("performance", "互动题型控制器：显示作答结果");
            };
            return StuFinishFlow;
        }(BaseFlow_1.default);
        exports.default = StuFinishFlow;
    },
    "./presenters/AnswerFlowController/src/flows/StuSubmitFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var Submit_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/common/Submit.ts");
        var FlowState_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/FlowState.ts");
        var PopFactory_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/PopFactory.ts");
        var media_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/media.ts");
        var Tracker_1 = __webpack_require__("./presenters/AnswerFlowController/src/tracker/Tracker.ts");
        var EventID_1 = __webpack_require__("./presenters/AnswerFlowController/src/tracker/EventID.ts");
        var StuSubmitFlow = function(_super) {
            __extends(StuSubmitFlow, _super);
            function StuSubmitFlow(mode) {
                var _this = _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_SUBMIT_ANSWER
                }, {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.AUTO_SEND_ANSWER
                }, {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_CALLBACK
                } ]) || this;
                _this.sendTriggered = false;
                return _this;
            }
            StuSubmitFlow.prototype.execute = function(eventData, eventName) {
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_SUBMIT_ANSWER) {
                    this.onSubmit(eventData, false);
                } else if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.AUTO_SEND_ANSWER) {
                    this.onSubmit(eventData, true);
                } else if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_CALLBACK) {
                    this.onQuestionSubmitCallback(eventData);
                }
            };
            StuSubmitFlow.prototype.onQuestionSubmitCallback = function(data) {
                this.logger.debug("performance", "收到提交答案回调");
                if (data.item == "nosubmit" || this.flowState.submitTrigger !== FlowState_1.default.SUBMIT_TYPE_SUBMIT) {
                    return;
                }
                var value = data.value;
                var targetState;
                var hintText = "";
                if (value.result) {
                    targetState = ConstVar_1.QUESTION_STATE_CODE.CAN_MODIFY;
                    hintText = this.mContext.getLangText("submit_successfully");
                    this.mContext.State.submitSuccess = true;
                } else {
                    targetState = ConstVar_1.QUESTION_STATE_CODE.RETRY_SUBMIT;
                    hintText = this.mContext.getLangText("submit_failed");
                }
                this.mContext.dispatchEvent("showMessageBox", ConstVariable.PresenterEventType.NATIVE_EVENT, {
                    item: "open",
                    value: {
                        text: hintText,
                        layout: [ "center", "bottom" ],
                        type: "gray",
                        timeout: 2e3
                    }
                });
                this.mContext.State.questionState = targetState;
                this.mContext.AnswerInterceptOperate.afterSendAnswer(value);
            };
            StuSubmitFlow.prototype.submit = function(btnState, auto) {
                this.logger.info("performance", "开始处理提交答案请求");
                var that = this;
                var mContext = that.mContext;
                mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.SUBMITTING;
                that.flowState.submitTrigger = FlowState_1.default.SUBMIT_TYPE_SUBMIT;
                if (btnState === ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT || btnState === ConstVar_1.QUESTION_STATE_CODE.RETRY_SUBMIT) {
                    this.mContext.QuestionOperate.lock({
                        type: "OnSubmit"
                    });
                }
                Submit_1.Submit.onSubmit.call(that, (function(answer, spendTime) {
                    that.mContext.State.submittedAnswer = answer;
                    that.mContext.State.submittedSpendTime = spendTime;
                    that.handleSubmit(answer, spendTime, btnState, auto);
                }));
            };
            StuSubmitFlow.prototype.onSubmit = function(eventData, auto) {
                var that = this;
                var mContext = that.mContext;
                eventData.state = eventData.state || mContext.State.questionState;
                var lastState = mContext.State.questionState;
                media_1.resetMedia();
                if (auto) {
                    that.submit(eventData.state, auto);
                } else {
                    var isNeedSubmitTip = eventData.isNeedSubmitTip;
                    if (mContext.QuestionOperate.getTipType() === ConstVar_1.TIP_TYPE.NONE || isNeedSubmitTip === false) {
                        that.submit(eventData.state, auto);
                    } else {
                        Submit_1.Submit.preSubmit(mContext, (function() {
                            mContext.State.questionState = lastState;
                        }), (function() {
                            that.submit(eventData.state, auto);
                            var questionInfo = mContext.questionOperate.mainService.getQuestionInfo();
                            var id = EventID_1.getEventId(EventID_1.EVENT_OFFSET_ID.SUBMIT_QUESTION);
                            if (eventData.state === "retry_submit") {
                                id = EventID_1.getEventId(EventID_1.EVENT_OFFSET_ID.RESUBMIT_QUESTION);
                            }
                            var examInfoStr = localStorage.getItem("ExamInfo");
                            var exercise_data = {};
                            if (!!examInfoStr) {
                                var examInfo = JSON.parse(examInfoStr);
                                exercise_data = {
                                    exercise_id: examInfo.questionId || "",
                                    exercise_type: examInfo.questionType || "",
                                    exercise_mode: examInfo.exerciseMode || ""
                                };
                            }
                            Tracker_1.track({
                                id: id,
                                data: {
                                    id: questionInfo.id,
                                    result: "success",
                                    end_time: Tracker_1.getTime(),
                                    begin_time: Tracker_1.getTime(),
                                    respondence_time: mContext.timerOperate.getTimeValue() * 1e3,
                                    relevance_teacher: true,
                                    exercise_data: exercise_data
                                }
                            });
                        }));
                    }
                }
            };
            StuSubmitFlow.prototype.handleSubmit = function(questionAnswer, spendTime, state, auto) {
                state = state || this.mContext.State.questionState;
                this.logger.debug("performance", "开始主动提交答案了", questionAnswer, state);
                switch (state) {
                  case ConstVar_1.QUESTION_STATE_CODE.CAN_MODIFY:
                    this.onModify();
                    break;

                  case ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT:
                  case ConstVar_1.QUESTION_STATE_CODE.RETRY_SUBMIT:
                    this.onSendAnswer(questionAnswer, auto);
                    break;

                  case ConstVar_1.QUESTION_STATE_CODE.SUBMITTING:
                  case ConstVar_1.QUESTION_STATE_CODE.CAN_NOT_SUBMIT:
                  case ConstVar_1.QUESTION_STATE_CODE.FINISH:
                  default:
                    break;
                }
            };
            StuSubmitFlow.prototype.onModify = function() {
                this.mContext.QuestionOperate.unLock();
                this.logger.debug("互动题型控制器：点击修改按钮，按钮状态变更为灰态的「提交」");
                this.mContext.TimerOperate.start(true);
                this.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.MODIFY_SUBMIT;
            };
            StuSubmitFlow.prototype.onSendAnswer = function(questionAnswer, isAutoSend) {
                if (questionAnswer === undefined || questionAnswer.answer === undefined) {
                    this.logger.debug("互动题型控制器：答案为空，无法提交");
                    return;
                }
                this.logger.debug("performance", "互动题型控制器：提交答案开始，autosend:" + isAutoSend + ",当前习题答案：" + JSON.stringify(questionAnswer));
                this.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.SUBMITTING;
                var sendData = {
                    questionId: questionAnswer.questionId,
                    answer: questionAnswer.answer
                };
                sendData.answer.answerState = questionAnswer.answerState;
                this.mContext.AnswerInterceptOperate.beforeSendAnswer(sendData);
                this.mContext.dispatchEvent(ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, sendData);
                this.sendTriggered = true;
                this.logger.debug("performance", "互动题型控制器：提交答案请求发送结束");
                if (isAutoSend || this.mContext.Option.showResultOnSubmit) {
                    this.logger.debug("_onSendAnswer执行showResultHint");
                    this.mContext.QuestionOperate.showAnswer("user");
                    var pop = {
                        type: "cartoonError",
                        text: this.mContext.getLangText("answer_wrong")
                    };
                    if (questionAnswer.answer.answer_result === true) {
                        pop = {
                            type: "cartoonRight",
                            text: this.mContext.getLangText("answer_right")
                        };
                    }
                    PopFactory_1.PopFactory.get("mulMsgRmk").show(pop);
                }
            };
            return StuSubmitFlow;
        }(BaseFlow_1.default);
        exports.default = StuSubmitFlow;
    },
    "./presenters/AnswerFlowController/src/flows/SubmitFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var PopFactory_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/PopFactory.ts");
        var Submit_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/common/Submit.ts");
        var QuestionState_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/common/QuestionState.ts");
        var media_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/media.ts");
        var SubmitFlow = function(_super) {
            __extends(SubmitFlow, _super);
            function SubmitFlow(mode) {
                var _this = _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_SUBMIT_ANSWER
                }, {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.AUTO_SEND_ANSWER
                } ]) || this;
                _this.initInject();
                return _this;
            }
            SubmitFlow.prototype.execute = function(eventData, eventName) {
                var beforeSubmitResult = this.mContext.QuestionOperate.beforeSubmit();
                if (beforeSubmitResult === false) {
                    return;
                }
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_SUBMIT_ANSWER) {
                    this.onSubmit(eventData, false);
                } else if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.AUTO_SEND_ANSWER) {
                    this.onSubmit(eventData, true);
                }
            };
            SubmitFlow.prototype.onSubmit = function(eventData, auto) {
                var that = this;
                media_1.resetMedia();
                if (this.mContext.State.questionState === ConstVar_1.QUESTION_STATE_CODE.RESET) {
                    QuestionState_1.default.resetTeacher(this.mContext);
                } else {
                    Submit_1.Submit.onSubmit.call(that, (function(answer, spendTime) {
                        that.handleSubmit(answer, spendTime, auto, eventData);
                        if (auto) {
                            that.updateCorrectStatusBar();
                        }
                    }));
                }
            };
            SubmitFlow.prototype.updateCorrectStatusBar = function() {
                this.mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.BACK_ORIGINAL, "hidden", false);
                this.mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER, "hidden", true);
                this.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                this.mContext.SubmitButtonOperate.setVisible(false);
                this.mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SEND, "hidden", true);
            };
            SubmitFlow.prototype.handleSubmit = function(questionAnswer, spendTime, auto, eventData) {
                var that = this;
                var mContext = this.mContext;
                that.logger.debug("开始主动提交答案了", questionAnswer);
                mContext.QuestionOperate.lock({
                    type: "OnSubmit"
                });
                if (eventData && eventData.block) {
                    try {
                        that.mContext.dispatchEvent(ConstVar_1.CLASSROOM_EVENT_NAME.GET_QUESTION_ANSWER_CALLBACK, ConstVar_1.EVENT_TYPE.NATIVE_EVENT, questionAnswer);
                    } catch (e) {}
                    this.handleInjectObject(questionAnswer, spendTime);
                    return;
                } else {
                    var block = this.handleInjectObject(questionAnswer, spendTime);
                    if (block) {
                        return;
                    }
                }
                var popDialog = $(mContext.View).find(".dialog_container");
                if (auto) {
                    this.handleAnswer(questionAnswer, popDialog);
                } else {
                    Submit_1.Submit.preSubmit(mContext, (function() {
                        mContext.QuestionOperate.unLock();
                        mContext.State.questionState = mContext.SubmitButtonOperate.getState().code;
                    }), (function() {
                        that.handleAnswer(questionAnswer, popDialog);
                    }));
                }
            };
            SubmitFlow.prototype.handleAnswer = function(questionAnswer, popDialog) {
                var mContext = this.mContext;
                mContext.TimerOperate.stop();
                mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.RESET;
                var popParam = {
                    container: popDialog,
                    mode: "",
                    type: "error",
                    text: mContext.getLangText("answer_wrong")
                };
                popParam.container = this.mContext.LayoutService.getContainer("MessagePanel");
                if (!popParam.container || !popParam.container.get(0)) {
                    popParam.container = $(this.mContext.View).find(".dialog_container");
                    popParam.mode = "wood";
                }
                if (mContext.Option.skin) {
                    popParam.mode = mContext.Option.skin;
                }
                if (questionAnswer.answer.answer_result) {
                    popParam.type = "right";
                    popParam.text = mContext.getLangText("answer_right");
                }
                if (mContext.QuestionOperate.getQuestionModel().subjective) {
                    popParam.type = "toast";
                    popParam.text = mContext.getLangText("submit_successfully");
                    popParam.hidetime = 2e3;
                }
                PopFactory_1.PopFactory.get("msgRmk").show(popParam);
                this.mContext.dispatchEvent(ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_BY_TEACHER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, null);
                var type = questionAnswer.answer.user_response ? "user" : "correct";
                mContext.QuestionOperate.showAnswer(type, questionAnswer);
            };
            SubmitFlow.prototype.initInject = function() {
                var injectParam = this.mContext.Option.inject;
                if (injectParam != undefined && injectParam.indexOf("answerFlow") >= 0) {
                    this.mContext.__interface.setCallbackList = this.injectSetCallbackList.bind(this);
                }
            };
            SubmitFlow.prototype.injectSetCallbackList = function(injectObject) {
                var methodList = [ "onAnswerQuestion" ], checkAll = true;
                if (this.injectObject == undefined) {
                    _.each(methodList, (function(method) {
                        if (injectObject[method] == undefined || !$.isFunction(injectObject[method])) {
                            checkAll = false;
                        }
                    }));
                    this.injectObject = checkAll ? injectObject : undefined;
                }
            };
            SubmitFlow.prototype.handleInjectObject = function(answer, spendTime) {
                var blockProgress = false;
                if (this.injectObject) {
                    var info = this.mContext.QuestionOperate.getInfo(), id = void 0;
                    if (info) {
                        id = info.id;
                    }
                    if (answer && answer.questionId) {
                        id = answer.questionId;
                    }
                    var result = {
                        answers: {},
                        spendTime: -1
                    };
                    result.spendTime = this.mContext.TimerOperate.getTimeValue() || -1;
                    result.answers[id] = answer;
                    blockProgress = this.injectObject.onAnswerQuestion.call(this.injectObject, id, result);
                }
                return blockProgress;
            };
            return SubmitFlow;
        }(BaseFlow_1.default);
        exports.default = SubmitFlow;
    },
    "./presenters/AnswerFlowController/src/flows/TimeUpFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var TimeUpFlow = function(_super) {
            __extends(TimeUpFlow, _super);
            function TimeUpFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.INTERNAL_EVENT_NAME.TIME_UP,
                    type: ConstVar_1.EVENT_TYPE.INTERNAL
                } ]) || this;
            }
            TimeUpFlow.prototype.execute = function(eventData, eventName) {
                this.onTimeUp();
            };
            TimeUpFlow.prototype.onTimeUp = function() {
                var option = {
                    type: "stop"
                };
                this.mContext.dispatchEvent("QuizProcess", ConstVariable.PresenterEventType.IC_PLAYER_EVENT, option);
            };
            return TimeUpFlow;
        }(BaseFlow_1.default);
        exports.default = TimeUpFlow;
    },
    "./presenters/AnswerFlowController/src/flows/common/QuestionState.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var QuestionState = {
            resetTeacher: function(mContext) {
                mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                mContext.TimerOperate.stop();
                mContext.TimerOperate.start(false);
                mContext.QuestionOperate.changeState({
                    unlockQuestion: {},
                    resetQuestion: {}
                });
            }
        };
        exports.default = QuestionState;
    },
    "./presenters/AnswerFlowController/src/flows/common/Submit.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var PopFactory_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/PopFactory.ts");
        var getSubmitTipText = function(mContext) {
            var state = mContext.QuestionOperate.getAnswerState(), tipType = mContext.QuestionOperate.getTipType(), questionModel = mContext.QuestionOperate.getQuestionModel(), langText = mContext.getLangText("submit_answer");
            if (state && questionModel && tipType) {
                var itemsCount = 0, itemKeys = Object.keys(state.items), allAnsweredCount = 0, completeState = void 0, model = void 0, particalAnsweredCount = 0, unCompleteCount = 0;
                for (var id in state.items) {
                    if (!state.items.hasOwnProperty(id)) {
                        continue;
                    }
                    itemsCount++;
                    completeState = state.items[id].completeState;
                    model = questionModel;
                    if (questionModel.items) {
                        model = questionModel.items.filter((function(item) {
                            return item.id === id;
                        }))[0];
                    }
                    if (model && model.type === "multiplechoice") {
                        if (completeState == ConstVar_1.COMPLETE_STATE.PARTICAL_ANSWERED) {
                            completeState = ConstVar_1.COMPLETE_STATE.ALL_ANSWERED;
                        }
                    }
                    if (completeState === ConstVar_1.COMPLETE_STATE.ALL_ANSWERED) {
                        allAnsweredCount++;
                    } else if (completeState === ConstVar_1.COMPLETE_STATE.PARTICAL_ANSWERED) {
                        particalAnsweredCount++;
                        unCompleteCount++;
                    } else if (completeState === ConstVar_1.COMPLETE_STATE.UNANSWERED) {
                        unCompleteCount++;
                    }
                }
                if (unCompleteCount > 0) {
                    if (tipType === ConstVar_1.TIP_TYPE.MULTBLANK) {
                        if (itemsCount > 1) {
                            langText = mContext.getLangText("unanswered_blank").replace(/\$\{n\}/, unCompleteCount);
                        } else {
                            if (particalAnsweredCount === 1) {
                                var item = state.items[itemKeys[0]];
                                langText = mContext.getLangText("unanswered_blank").replace(/\$\{n\}/, item.unAnsweredCount);
                            }
                        }
                    } else if (tipType === ConstVar_1.TIP_TYPE.MULTQUESTION) {
                        langText = mContext.getLangText("unanswered_question").replace(/\$\{n\}/, unCompleteCount);
                    } else if (tipType === ConstVar_1.TIP_TYPE.PARTICAL) {
                        langText = mContext.getLangText("unanswered_partical");
                    }
                }
                if (allAnsweredCount === 0 && particalAnsweredCount === 0) {
                    langText = mContext.getLangText("unanswered_all");
                }
            }
            return langText;
        };
        exports.Submit = {
            onSubmit: function(hanlder) {
                var mContext = this.mContext;
                var deferreds = mContext.QuestionOperate.getAnswer();
                deferreds.done((function() {
                    var spendTime = mContext.TimerOperate.getTimeValue();
                    var answer = arguments[0];
                    hanlder && hanlder(answer, spendTime);
                }));
            },
            preSubmit: function(mContext, cancelCallback, confirmCallback) {
                var tipText = getSubmitTipText(mContext);
                PopFactory_1.PopFactory.get("mulMsgRmk").show({
                    type: "confirm",
                    text: tipText,
                    buttons: [ {
                        text: mContext.getLangText("submit_cancel"),
                        handle: function() {
                            PopFactory_1.PopFactory.get("mulMsgRmk").hide();
                            cancelCallback && cancelCallback();
                        }
                    }, {
                        text: mContext.getLangText("submit_confirm"),
                        handle: function() {
                            PopFactory_1.PopFactory.get("mulMsgRmk").hide();
                            confirmCallback && confirmCallback();
                        }
                    } ]
                });
            }
        };
    },
    "./presenters/AnswerFlowController/src/flows/playerflow/BasePlayerFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/BaseFlow.ts");
        var BasePlayerFlow = function(_super) {
            __extends(BasePlayerFlow, _super);
            function BasePlayerFlow(mode, events) {
                return _super.call(this, mode, events) || this;
            }
            BasePlayerFlow.prototype.attachEvents = function() {
                var that = this;
                var mContext = this.mContext;
                var name;
                var data;
                this.events.forEach((function(item, index) {
                    name = item.name;
                    data = item.data;
                    data.validate = that.validate.bind(that);
                    data.done = function(eventData, success, fail) {
                        that.execute(eventData, name, success, fail);
                    };
                    mContext.PlayerController.registerFlow(item.name, data);
                }));
            };
            return BasePlayerFlow;
        }(BaseFlow_1.default);
        exports.default = BasePlayerFlow;
    },
    "./presenters/AnswerFlowController/src/flows/playerflow/PreviewShowCorrectAnswerFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BasePlayerFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/BasePlayerFlow.ts");
        var PreviewShowCorrectAnswerFlow = function(_super) {
            __extends(PreviewShowCorrectAnswerFlow, _super);
            function PreviewShowCorrectAnswerFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.PREVIEW_SHOW_CORRECT_ANSWER,
                    type: ConstVar_1.EVENT_TYPE.PLAYER_FLOW,
                    data: {
                        scope: "page"
                    }
                } ]) || this;
            }
            PreviewShowCorrectAnswerFlow.prototype.validate = function(data) {
                var defaultOption = {
                    finish: true,
                    whoAnswer: "correct",
                    specialAnswer: undefined,
                    context: this,
                    lock: true,
                    stateCode: null
                };
                if (data == undefined) {
                    return defaultOption;
                } else {
                    return $.extend(defaultOption, data);
                }
            };
            PreviewShowCorrectAnswerFlow.prototype.execute = function(option, eventName) {
                var mContext = this.mContext;
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.PREVIEW_SHOW_CORRECT_ANSWER) {
                    if (option.finish == true) {
                        mContext.TimerOperate.stop();
                        mContext.State.questionState = !option.stateCode ? ConstVar_1.QUESTION_STATE_CODE.RESET : option.stateCode;
                    }
                    if (option.lock == true || option.finish == true) {
                        mContext.QuestionOperate.lock();
                    }
                    switch (option.whoAnswer) {
                      case "correct":
                      case "user":
                        mContext.QuestionOperate.showAnswer(option.whoAnswer);
                        break;

                      case "special":
                        mContext.QuestionOperate.showAnswer("user", option.specialAnswer);
                    }
                }
            };
            return PreviewShowCorrectAnswerFlow;
        }(BasePlayerFlow_1.default);
        exports.default = PreviewShowCorrectAnswerFlow;
    },
    "./presenters/AnswerFlowController/src/flows/playerflow/SendQuestionFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BasePlayerFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/BasePlayerFlow.ts");
        var media_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/media.ts");
        var SendQuestionFlow = function(_super) {
            __extends(SendQuestionFlow, _super);
            function SendQuestionFlow(mode) {
                var _this = _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.AS_SEND_QUESTION,
                    type: ConstVar_1.EVENT_TYPE.PLAYER_FLOW,
                    data: {
                        scope: "page"
                    }
                } ]) || this;
                _this.currentScope = [ "page", "common", "tool" ];
                _this.referenceModule = _this.mContext.Model.$.unqiueId;
                _this.initFlowHandler();
                _this.sendCallBack = {
                    success: null,
                    fail: null
                };
                return _this;
            }
            SendQuestionFlow.prototype.initFlowHandler = function() {
                if (this.mContext.__interface === undefined) {
                    return;
                }
                this.mContext.__interface.getExerciseData = this.getExerciseData.bind(this);
                this.mContext.__interface.exerciseStartSuccess = this.exerciseStartSuccess.bind(this);
                this.mContext.__interface.exerciseStartFail = this.exerciseStartFailure.bind(this);
                this.mContext.__interface.exerciseResetSuccess = this.exerciseStartSuccess.bind(this);
                this.mContext.__interface.exerciseResetFail = this.exerciseStartFailure.bind(this);
            };
            SendQuestionFlow.prototype.getExerciseData = function(data) {
                var info = this.mContext.QuestionOperate.getInfo();
                if (info) {
                    data.questionInfo = info;
                }
                var extendData = this.mContext.QuestionOperate.getExtendData();
                if (extendData) {
                    if (data.extraData && typeof data.extraData === "object") {
                        data.extraData = $.extend(data.extraData, extendData);
                    } else {
                        data.extraData = extendData;
                    }
                }
                return data;
            };
            SendQuestionFlow.prototype.getToolExerciseData = function(data) {
                var tools = window.player.getToolList(), all = tools && tools.all || [], items;
                all.forEach((function(sub, i) {
                    items = sub.items && sub.items.items;
                    if (items && items.length > 0) {
                        items.forEach((function(presenter) {
                            if (presenter.presenterCode === "DynamicAnswer" && presenter.presenter && presenter.presenter.getService && presenter.presenter.getService().getExerciseData) {
                                presenter.presenter.getService().getExerciseData(data);
                            }
                        }));
                    }
                }));
            };
            SendQuestionFlow.prototype.exerciseStartSuccess = function() {
                media_1.resetMedia();
                this.sendCallBack.success && this.sendCallBack.success();
                this.mContext.dispatchEvent("SendQuestionToStudent", ConstVariable.PresenterEventType.IC_PLAYER_EVENT, {
                    status: "success"
                });
                this.logger.debug("发送题目的流程执行：成功!");
            };
            SendQuestionFlow.prototype.exerciseStartFailure = function() {
                this.sendCallBack.fail && this.sendCallBack.fail();
                this.mContext.dispatchEvent("SendQuestionToStudent", ConstVariable.PresenterEventType.IC_PLAYER_EVENT, {
                    status: "failure"
                });
                this.logger.debug("发送题目的流程执行：失败!");
            };
            SendQuestionFlow.prototype.validate = function(data) {
                if (data.op !== "send" && data.op !== "resend") {
                    throw new Error("SendQuestionFlow事件参数不支持");
                }
                return data;
            };
            SendQuestionFlow.prototype.execute = function(option, eventName, success, fail) {
                var _this = this;
                var flowName = "";
                var isTool = false;
                var questionInfo = this.mContext.QuestionOperate.getInfo();
                if (questionInfo && questionInfo.isTool === true) {
                    isTool = true;
                }
                this.sendCallBack = {
                    success: success,
                    fail: fail
                };
                this.currentScope[0] = "page";
                if (option.op === "send") {
                    if (isTool) {
                        this.currentScope[0] = "tool";
                        flowName = "exerciseToolStart";
                    } else {
                        flowName = "exerciseStart";
                    }
                } else if (option.op === "resend") {
                    flowName = "exerciseReset";
                }
                this.mContext.QuestionInterceptOperate.runBeforeIntercept().then((function() {
                    _this.mContext.PlayerController.startFlow(flowName, {
                        scope: _this.currentScope,
                        sourcePresenterUnqiueId: _this.referenceModule
                    });
                    _this.mContext.dispatchEvent("SendQuestionToStudent", ConstVariable.PresenterEventType.IC_PLAYER_EVENT, {
                        status: "sending"
                    });
                    _this.logger.debug("发送题目的流程执行：开始!");
                    _this.mContext.QuestionInterceptOperate.runAfterIntercept();
                })).catch((function(e) {
                    _this.logger.warn("was stop by intercept,intercept message(" + e + ")");
                }));
            };
            return SendQuestionFlow;
        }(BasePlayerFlow_1.default);
        exports.default = SendQuestionFlow;
    },
    "./presenters/AnswerFlowController/src/flows/playerflow/SetQuestionStateFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BasePlayerFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/BasePlayerFlow.ts");
        var SetQuestionStateFlow = function(_super) {
            __extends(SetQuestionStateFlow, _super);
            function SetQuestionStateFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.SET_QUESTION_STATUS,
                    type: ConstVar_1.EVENT_TYPE.PLAYER_FLOW,
                    data: {
                        scope: "page"
                    }
                } ]) || this;
            }
            SetQuestionStateFlow.prototype.validate = function(data) {
                var defaultOption = {
                    status: "",
                    options: {
                        timer: ""
                    },
                    redoTimestamp: 0
                };
                if (data == undefined) {
                    return defaultOption;
                } else {
                    return $.extend(defaultOption, data);
                }
            };
            SetQuestionStateFlow.prototype.execute = function(option, eventName) {
                var questionState;
                var btnState;
                var mContext = this.mContext;
                switch (option.status) {
                  case "reset":
                    questionState = {
                        resetQuestion: {},
                        unlockQuestion: {}
                    };
                    btnState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                    break;

                  case "lock":
                    questionState = {
                        lockQuestion: {}
                    };
                    btnState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                    break;

                  case "unlock":
                    questionState = {
                        unlockQuestion: {}
                    };
                    break;

                  case "pause":
                    questionState = {
                        pauseQuestion: {}
                    };
                    break;

                  case "finish":
                    questionState = {
                        finishQuestion: {}
                    };
                    btnState = ConstVar_1.QUESTION_STATE_CODE.FINISH;
                    break;

                  case "reflow":
                    if (mContext.Option.runtime.isStudent) {
                        mContext.State.submitSuccess = false;
                        questionState = {
                            unlockQuestion: {}
                        };
                    } else {
                        questionState = {
                            resetQuestion: {},
                            lockQuestion: {}
                        };
                    }
                    btnState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                    if (option.options.timer === "") {
                        option.options.timer = "continue";
                    }
                    if (option.options.timer === "continue") {
                        if (mContext.Option.runtime.isStudent) {
                            mContext.TimerOperate.start(true, option.redoTimestamp);
                        } else {
                            mContext.TimerOperate.start();
                        }
                    }
                    break;
                }
                if (option.status !== "reflow") {
                    if (option.options.timer === "continue") {
                        mContext.TimerOperate.start();
                    } else if (option.options.timer === "reset") {
                        mContext.TimerOperate.resetPauseUp();
                        mContext.TimerOperate.stop();
                    }
                }
                if (questionState) {
                    mContext.QuestionOperate.changeState(questionState);
                }
                if (btnState) {
                    mContext.State.questionState = btnState;
                }
            };
            return SetQuestionStateFlow;
        }(BasePlayerFlow_1.default);
        exports.default = SetQuestionStateFlow;
    },
    "./presenters/AnswerFlowController/src/flows/playerflow/SetToolBarStateFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BasePlayerFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/BasePlayerFlow.ts");
        var SetToolBarStateFlow = function(_super) {
            __extends(SetToolBarStateFlow, _super);
            function SetToolBarStateFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.QF_SET_TOOLBAR_STATE,
                    type: ConstVar_1.EVENT_TYPE.PLAYER_FLOW,
                    data: {
                        scope: "page"
                    }
                } ]) || this;
            }
            SetToolBarStateFlow.prototype.validate = function(data) {
                var defaultOption = {
                    submitVisible: null,
                    sendBtnState: null,
                    sendBtnVisible: null,
                    backBtnVisible: null,
                    showAnswerBtnVisible: null,
                    showHintBtnVisible: null,
                    showAnalysisBtnVisible: null
                };
                if (data == undefined) {
                    return defaultOption;
                } else {
                    return $.extend(defaultOption, data);
                }
            };
            SetToolBarStateFlow.prototype.execute = function(option, eventName) {
                var mContext = this.mContext;
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.QF_SET_TOOLBAR_STATE) {
                    if (option.sendBtnState === "back") {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.BACK_ORIGINAL, "hidden", false);
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SEND, "hidden", true);
                    } else if (option.sendBtnState === "send") {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.BACK_ORIGINAL, "hidden", true);
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SEND, "hidden", false);
                    }
                    if (option.sendBtnVisible === false || option.sendBtnVisible === true) {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SEND, "hidden", !option.sendBtnVisible);
                    }
                    if (option.backBtnVisible === false || option.backBtnVisible === true) {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.BACK_ORIGINAL, "hidden", !option.backBtnVisible);
                    }
                    if (option.showAnswerBtnVisible === false || option.showAnswerBtnVisible === true) {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER, "hidden", !option.showAnswerBtnVisible);
                    }
                    if (option.submitVisible === true || option.submitVisible === false) {
                        mContext.SubmitButtonOperate.setVisible(option.submitVisible);
                    }
                    if (option.showHintBtnVisible === true || option.showHintBtnVisible === false) {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER, "hidden", !option.showHintBtnVisible);
                    }
                    if (option.showAnalysisBtnVisible === true || option.showAnalysisBtnVisible === false) {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER, "hidden", !option.showHintBtnVisible);
                    }
                }
            };
            return SetToolBarStateFlow;
        }(BasePlayerFlow_1.default);
        exports.default = SetToolBarStateFlow;
    },
    "./presenters/AnswerFlowController/src/flows/playerflow/UpdateToolBarStateFlow.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var BasePlayerFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/BasePlayerFlow.ts");
        var UpdateToolBarStateFlow = function(_super) {
            __extends(UpdateToolBarStateFlow, _super);
            function UpdateToolBarStateFlow(mode) {
                return _super.call(this, mode, [ {
                    name: ConstVar_1.CLASSROOM_EVENT_NAME.QF_UPDATE_TOOLBAR_STATE,
                    type: ConstVar_1.EVENT_TYPE.PLAYER_FLOW,
                    data: {
                        scope: "page"
                    }
                } ]) || this;
            }
            UpdateToolBarStateFlow.prototype.validate = function(data) {
                var defaultOption = {
                    answerState: ""
                };
                if (data == undefined) {
                    return defaultOption;
                } else {
                    return $.extend(defaultOption, data);
                }
            };
            UpdateToolBarStateFlow.prototype.execute = function(option, eventName) {
                var mContext = this.mContext;
                if (eventName === ConstVar_1.CLASSROOM_EVENT_NAME.QF_UPDATE_TOOLBAR_STATE) {
                    mContext.QuestionOperate.hasHint().done((function(has) {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_HINT, "hidden", !has);
                    }));
                    mContext.QuestionOperate.hasAnalysis().done((function(has) {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_ANALYSIS, "hidden", !has);
                    }));
                    if (option.answerState === "correct") {
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER, "hidden", true);
                    } else {
                        var hasCorrectOrKeyAnswer = mContext.QuestionOperate.hasCorrectOrKeyAnswer();
                        mContext.QuestionMode.setBarState(ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER, "hidden", !hasCorrectOrKeyAnswer);
                    }
                }
            };
            return UpdateToolBarStateFlow;
        }(BasePlayerFlow_1.default);
        exports.default = UpdateToolBarStateFlow;
    },
    "./presenters/AnswerFlowController/src/modes/FlowModule.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var QuestionStateFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/QuestionStateFlow.ts");
        var EmbeddedQuestionStateFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/EmbeddedQuestionStateFlow.ts");
        var SubmitFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/SubmitFlow.ts");
        var StuSubmitFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/StuSubmitFlow.ts");
        var StuFinishFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/StuFinishFlow.ts");
        var ExerciseStateChangeFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/ExerciseStateChangeFlow.ts");
        var StuExerciseStateChangeFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/StuExerciseStateChangeFlow.ts");
        var TimeUpFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/TimeUpFlow.ts");
        var SendAnswerToNativeFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/SendAnswerToNativeFlow.ts");
        var PreviewShowCorrectAnswerFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/PreviewShowCorrectAnswerFlow.ts");
        var SetQuestionStateFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/SetQuestionStateFlow.ts");
        var SetToolBarStateFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/SetToolBarStateFlow.ts");
        var SendQuestionFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/SendQuestionFlow.ts");
        var StatusRecoverFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/StatusRecoverFlow.ts");
        var UpdateToolBarStateFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/playerflow/UpdateToolBarStateFlow.ts");
        var AnswerStateSyncFlow_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/AnswerStateSyncFlow.ts");
        var FlowModule = function() {
            function FlowModule(context) {
                this.flows = [];
                this.mContext = context;
                this.flows = [];
            }
            FlowModule.prototype.init = function(mode) {
                var env = this.mContext.Option;
                this.flows.push(new PreviewShowCorrectAnswerFlow_1.default(mode));
                this.flows.push(new SetQuestionStateFlow_1.default(mode));
                this.flows.push(new SendAnswerToNativeFlow_1.default(mode));
                this.flows.push(new SetToolBarStateFlow_1.default(mode));
                this.flows.push(new UpdateToolBarStateFlow_1.default(mode));
                this.flows.push(new SendQuestionFlow_1.default(mode));
                this.flows.push(new AnswerStateSyncFlow_1.default(mode));
                this.flows.push(new QuestionStateFlow_1.default(mode));
                this.flows.push(new EmbeddedQuestionStateFlow_1.default(mode));
                if (env.runtime.isStudent) {
                    this.flows.push(new StuSubmitFlow_1.default(mode));
                    this.flows.push(new StuExerciseStateChangeFlow_1.default(mode));
                    this.flows.push(new StuFinishFlow_1.default(mode));
                } else {
                    this.flows.push(new SubmitFlow_1.default(mode));
                }
                if (env.runtime.isTeacher) {
                    this.flows.push(new ExerciseStateChangeFlow_1.default(mode));
                    this.flows.push(new StatusRecoverFlow_1.default(mode));
                }
                if (env.platform.pptShell) {
                    this.flows.push(new TimeUpFlow_1.default(mode));
                }
            };
            FlowModule.prototype.destroy = function() {};
            return FlowModule;
        }();
        exports.default = FlowModule;
    },
    "./presenters/AnswerFlowController/src/modes/FlowState.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var FlowState = function() {
            function FlowState(mode) {
                this._submitTrigger = "";
                this.mode = mode;
            }
            Object.defineProperty(FlowState.prototype, "submitTrigger", {
                get: function() {
                    return this._submitTrigger;
                },
                set: function(val) {
                    this._submitTrigger = val;
                },
                enumerable: true,
                configurable: true
            });
            FlowState.SUBMIT_TYPE_FINISH = "finish";
            FlowState.SUBMIT_TYPE_SUBMIT = "submit";
            return FlowState;
        }();
        exports.default = FlowState;
    },
    "./presenters/AnswerFlowController/src/modes/Mode.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var FlowState_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/FlowState.ts");
        var ToolbarModule_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/ToolbarModule.ts");
        var Mode = function() {
            function Mode(context) {
                this.mContext = context;
                this.flowState = new FlowState_1.default(this);
                this.bus = context.Bus;
                this.modules = [];
            }
            Mode.prototype.init = function() {
                var _this = this;
                this.modules.forEach((function(module) {
                    module.init(_this);
                }));
            };
            Mode.prototype.pushModule = function(module) {
                this.modules.push(module);
                if (module instanceof ToolbarModule_1.default) {
                    this.toolbarModule = module;
                }
            };
            Mode.prototype.commit = function(type, data) {
                this.bus.commit(type, data);
            };
            Mode.prototype.getToolBarModule = function() {
                return this.toolbarModule;
            };
            Mode.prototype.setBarState = function(btn, key, val) {
                if (this.toolbarModule) {
                    this.toolbarModule.getToolbar().changeState(btn, key, val);
                }
            };
            Mode.prototype.hideToolbar = function() {
                if (this.toolbarModule) {
                    return this.toolbarModule.getToolbar().hide();
                }
            };
            Mode.prototype.getContext = function() {
                return this.mContext;
            };
            Mode.prototype.getBus = function() {
                return this.bus;
            };
            Mode.prototype.getFlowState = function() {
                return this.flowState;
            };
            Mode.prototype.destroy = function() {
                this.modules.forEach((function(module, item) {
                    module.destroy();
                }));
            };
            return Mode;
        }();
        exports.default = Mode;
    },
    "./presenters/AnswerFlowController/src/modes/ModeBuilder.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var Mode_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/Mode.ts");
        var ModeBuilder = function() {
            function ModeBuilder(context) {
                this.mContext = context;
            }
            ModeBuilder.prototype.setFlowModule = function(flowModule) {
                this.flowModule = flowModule;
                return this;
            };
            ModeBuilder.prototype.setToolbarModule = function(toolbarModule) {
                this.toolbarModule = toolbarModule;
                return this;
            };
            ModeBuilder.prototype.build = function() {
                var mode = new Mode_1.default(this.mContext);
                if (this.flowModule) {
                    mode.pushModule(this.flowModule);
                }
                if (this.toolbarModule) {
                    mode.pushModule(this.toolbarModule);
                }
                return mode;
            };
            return ModeBuilder;
        }();
        exports.default = ModeBuilder;
    },
    "./presenters/AnswerFlowController/src/modes/ModeBus.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ModeBus = function() {
            function ModeBus() {
                this.mActions = Object.create(null);
            }
            ModeBus.prototype.register = function(action, handler, extendArgs) {
                if (!this.mActions[action]) {
                    this.mActions[action] = [];
                }
                this.mActions[action].push({
                    fn: handler,
                    args: extendArgs || undefined
                });
            };
            ModeBus.prototype.commit = function(action, param) {
                var _this = this;
                if (param === void 0) {
                    param = {};
                }
                if (this.mActions[action] === undefined) {
                    return;
                }
                _.each(this.mActions[action], (function(config) {
                    var args = config.args ? $.extend(param, config.args) : param;
                    return config.fn.call(_this.mActions, args);
                }));
            };
            ModeBus.prototype.release = function() {
                _.each(this.mActions, (function(action) {
                    action.length = -1;
                    action = null;
                }));
            };
            return ModeBus;
        }();
        exports.default = ModeBus;
    },
    "./presenters/AnswerFlowController/src/modes/ToolbarModule.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var Toolbar_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/Toolbar.ts");
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var ToolbarModule = function() {
            function ToolbarModule(context) {
                this.mContext = context;
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.PRESENTER_LOADED, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, this.onPresenterLoaded.bind(this));
            }
            ToolbarModule.prototype.onPresenterLoaded = function() {
                var _this = this;
                if (!this.mContext.LayoutService) {
                    return;
                }
                $.when(this.mContext.QuestionOperate.hasAnalysis(), this.mContext.QuestionOperate.hasHint()).done((function(hasAnalysis, hasHint) {
                    _this.initToolbar(hasAnalysis, hasHint);
                }));
            };
            ToolbarModule.prototype.reInitToolbar = function() {
                this.onPresenterLoaded();
            };
            ToolbarModule.prototype.initToolbar = function(hasAnalysis, hasHint) {
                var toolOption = {
                    containerEl: null,
                    items: {}
                };
                var env = this.mContext.Option;
                var qInfo = this.mContext.QuestionOperate.getInfo();
                if (!qInfo) {
                    return;
                }
                var typeCode = qInfo.type_code.toLocaleLowerCase();
                var hasCorrectOrKeyAnswer = this.mContext.QuestionOperate.hasCorrectOrKeyAnswer();
                toolOption.containerEl = this.mContext.LayoutService.getContainer("FootBarPanel");
                if (!toolOption.containerEl || !toolOption.containerEl.get(0)) {
                    toolOption.containerEl = $(".layout_footbar");
                    if (!toolOption.containerEl.get(0)) {
                        return;
                    }
                }
                if (env.app.questionBag && env.platform.pptShell) {
                    toolOption.items[ConstVar_1.BAR_TYPE.QB_RETURN] = {
                        order: 2
                    };
                    if (hasCorrectOrKeyAnswer) {
                        toolOption.items[ConstVar_1.BAR_TYPE.QB_SHOW_CORRECT] = {
                            order: 3
                        };
                    }
                } else if (env.platform.pptShell) {
                    toolOption.items[ConstVar_1.BAR_TYPE.BACK_ORIGINAL] = {
                        order: 1,
                        hidden: true
                    };
                    if (env.loadSendQuestion) {
                        toolOption.items[ConstVar_1.BAR_TYPE.SEND] = {
                            order: 2
                        };
                    }
                    toolOption.items[ConstVar_1.BAR_TYPE.SHOW_ANALYSIS] = {
                        order: 3,
                        hidden: !hasAnalysis
                    };
                    toolOption.items[ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER] = {
                        order: 4,
                        hidden: !hasCorrectOrKeyAnswer
                    };
                    toolOption.items[ConstVar_1.BAR_TYPE.SHOW_HINT] = {
                        order: 5,
                        hidden: !hasHint
                    };
                }
                if (!this.mode) {
                    throw new Error("toolbarModule: init method should be called before this");
                }
                if (typeCode === "mindjet") {
                    toolOption.containerEl.css({
                        visibility: "visible",
                        "z-index": "341"
                    });
                } else {
                    toolOption.containerEl.css({
                        visibility: "visible"
                    });
                }
                this.toolbar = new Toolbar_1.default(this.mode, toolOption);
                this.toolbar.init();
            };
            ToolbarModule.prototype.getToolbar = function() {
                return this.toolbar;
            };
            ToolbarModule.prototype.init = function(mode) {
                this.mode = mode;
            };
            ToolbarModule.prototype.destroy = function() {};
            return ToolbarModule;
        }();
        exports.default = ToolbarModule;
    },
    "./presenters/AnswerFlowController/src/operates/AnswerEquipmentOperate.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var PopFactory_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/PopFactory.ts");
        var Tracker_1 = __webpack_require__("./presenters/AnswerFlowController/src/tracker/Tracker.ts");
        var EventID_1 = __webpack_require__("./presenters/AnswerFlowController/src/tracker/EventID.ts");
        var ClickerSupportQuestion = [ "vote", "order", "choice", "multiplechoice", "judge", "TemporaryQuestion" ];
        var SmartPenSupportQuestion = [ "newhandwrite", "choice", "multiplechoice", "judge", "TemporaryQuestion", "DynamicAnswer" ];
        var DeviceType = {
            CLICKER: "clicker",
            PAD: "pad",
            PC: "pc",
            SMART_PEN: "smartPen"
        };
        var DeviceStatus = {
            CONNECT: "connect",
            DISCONNECT: "disconnect"
        };
        var ORDER_OPTION_NUM_LIMIT = 9;
        var OTHER_OPTION_NUM_LIMIT = 10;
        var AnswerEquipmentOperate = function() {
            function AnswerEquipmentOperate(context) {
                var _this = this;
                this._sendable = false;
                this.receiverDeviceCallbackHandler = function(eventData) {
                    _this.logger.debug("收到事件(" + ConstVar_1.AnswerEquipmentEvent.RECEIVER_DEVICE_CALLBACK_EVENT + "),EventData(%o)", eventData);
                    switch (eventData.type) {
                      case "getAllDevicesStatus":
                        setTimeout((function() {
                            var isClickerSupport = ClickerSupportQuestion.includes(_this._context.QuestionOperate.getQuestionModel().type);
                            _this.logger.debug("当前习题是否支持答题器作答：" + isClickerSupport);
                            if (isClickerSupport) {
                                var tipsDom = document.createElement("div");
                                $(tipsDom).addClass("ndui-transponder js_tips_dom");
                                var answer_equipment_connet_tips_txt = _this._context.getLangText("answer_equipment_connet_tips") || "答题接收器已连接";
                                var tipsHtml = '<i class="ndui-transponder__icon"></i>' + '<div class="ndui-transponder__word">' + '<span class="ndui-transponder__text">' + answer_equipment_connet_tips_txt + "</span>" + "</div>";
                                $(tipsDom).html(tipsHtml);
                                var statPanelTipsDom = $(tipsDom).clone();
                                statPanelTipsDom.addClass("ndui-transponder--position");
                                for (var key in eventData.data) {
                                    console.log(eventData.data[key].deviceStatus);
                                    if (eventData.data[key].deviceStatus === DeviceStatus.CONNECT) {
                                        console.log("AnswerEquipmentOperate", "答题连接器已连接");
                                        if (_this._context.LayoutService && _this._context.LayoutService.getContainer) {
                                            var $topRightPanel = _this._context.LayoutService.getContainer("TopRightPanel");
                                            if ($topRightPanel) {
                                                $topRightPanel.show();
                                                $topRightPanel.append(tipsDom);
                                            }
                                            var $statisticsPanel = _this._context.LayoutService.getContainer("StatisticsPanel");
                                            if ($statisticsPanel) {
                                                $statisticsPanel.append(statPanelTipsDom);
                                            }
                                        } else {
                                            _this.logger.warn("获取不到LayoutService");
                                        }
                                        break;
                                    } else {
                                        console.log("AnswerEquipmentOperate", "答题连接器未连接");
                                        if (_this._context.LayoutService && _this._context.LayoutService.getContainer) {
                                            var $topRightPanel = _this._context.LayoutService.getContainer("TopRightPanel");
                                            if ($topRightPanel && $topRightPanel.find(".js_tips_dom")) {
                                                $topRightPanel.find(".js_tips_dom").remove();
                                            }
                                            var $statisticsPanel = _this._context.LayoutService.getContainer("StatisticsPanel");
                                            if ($statisticsPanel && $statisticsPanel.find(".js_tips_dom")) {
                                                $statisticsPanel.find(".js_tips_dom").remove();
                                            }
                                        } else {
                                            _this.logger.warn("获取不到LayoutService");
                                        }
                                    }
                                }
                            }
                        }), 300);
                        break;

                      default:
                        _this.logger.warn("收到事件(" + ConstVar_1.AnswerEquipmentEvent.RECEIVER_DEVICE_CALLBACK_EVENT + ")，但没找到对应的处理Type，eventData(%o)", eventData);
                        break;
                    }
                };
                this.senderDeviceCallbackHandler = function(eventData) {
                    _this.logger.debug("收到事件(" + ConstVar_1.AnswerEquipmentEvent.SENDER_DEVICE_CALLBACK_EVENT + "),EventData(%o)", eventData);
                    switch (eventData.type) {
                      case "getOnlineStudentDevices":
                        _this._onlineStudentDevices = eventData.data.devices;
                        var zhongTianDevice_1 = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.CLICKER] : null;
                        var padDevice_1 = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.PAD] : null;
                        var pcDevice_1 = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.PC] : null;
                        var smartPenDevice_1 = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.SMART_PEN] : null;
                        setTimeout((function() {
                            var isSmartPenSupport = SmartPenSupportQuestion.includes(_this._context.QuestionOperate.getQuestionModel().type);
                            var isClickerSupport = ClickerSupportQuestion.includes(_this._context.QuestionOperate.getQuestionModel().type);
                            if (!isSmartPenSupport && smartPenDevice_1 && smartPenDevice_1.haveStudents || !isClickerSupport && zhongTianDevice_1 && zhongTianDevice_1.haveStudents && (!padDevice_1 || !padDevice_1.haveStudents) && (!pcDevice_1 || !pcDevice_1.haveStudents)) {
                                var toolbar = _this._context.QuestionMode.getToolBarModule().getToolbar();
                                if (toolbar) {
                                    toolbar.changeState("send", "enable", false);
                                }
                            }
                        }), 300);
                        break;

                      default:
                        _this.logger.warn("没有找到事件(" + ConstVar_1.AnswerEquipmentEvent.SENDER_DEVICE_CALLBACK_EVENT + ")对应的处理Type");
                        break;
                    }
                };
                this._cancelSend = function(reject) {
                    _this._context.QuestionOperate.unLock();
                    _this._context.State.questionState = _this._context.SubmitButtonOperate.getState().code;
                    var toolbar = _this._context.QuestionMode.getToolBarModule().getToolbar();
                    if (toolbar) {
                        toolbar.changeState("send", "enable", true);
                    }
                    var questionModel = _this._context.QuestionOperate.getQuestionModel();
                    Tracker_1.track({
                        id: EventID_1.getEventId(EventID_1.EVENT_OFFSET_ID.SHOW_OVER_CHOICE_DIALOG_CANCEL),
                        data: {
                            tool: {
                                id: questionModel.id
                            },
                            begin_time: Tracker_1.getTime()
                        }
                    });
                    reject("cancel send question");
                };
                this.confirmSendQuestion = function(resolve) {
                    var questionModel = _this._context.QuestionOperate.getQuestionModel();
                    Tracker_1.track({
                        id: EventID_1.getEventId(EventID_1.EVENT_OFFSET_ID.SHOW_OVER_CHOICE_DIALOG_CONFIRM),
                        data: {
                            tool: {
                                id: questionModel.id
                            },
                            begin_time: Tracker_1.getTime()
                        }
                    });
                    resolve();
                };
                this._context = context;
                this.init();
            }
            Object.defineProperty(AnswerEquipmentOperate.prototype, "logger", {
                get: function() {
                    return this._context.Logger;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerEquipmentOperate.prototype, "sendable", {
                get: function() {
                    return this._sendable;
                },
                enumerable: true,
                configurable: true
            });
            AnswerEquipmentOperate.prototype.init = function() {
                var _this = this;
                this.bindEvent();
                this.logger.debug("向ICR发送事件(" + ConstVar_1.AnswerEquipmentEvent.RECEIVER_DEVICE_EVENT + "),type: getAllDevicesStatus");
                this._context.dispatchEvent(ConstVar_1.AnswerEquipmentEvent.RECEIVER_DEVICE_EVENT, ConstVar_1.EVENT_TYPE.PPT_NATIVE_EVENT, {
                    type: "getAllDevicesStatus",
                    version: 1
                });
                this.logger.debug("向ICR发送事件(" + ConstVar_1.AnswerEquipmentEvent.SENDER_DEVICE_EVENT + "),type: getOnlineStudentDevices");
                this._context.dispatchEvent(ConstVar_1.AnswerEquipmentEvent.SENDER_DEVICE_EVENT, ConstVar_1.EVENT_TYPE.PPT_NATIVE_EVENT, {
                    type: "getOnlineStudentDevices",
                    version: 1
                });
                this._context.QuestionInterceptOperate.pushBeforeIntercept("AnswerEquipmentIntercept", (function() {
                    return new Promise((function(resolve, reject) {
                        var zhongTianDevice = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.CLICKER] : null;
                        var padDevice = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.PAD] : null;
                        var pcDevice = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.PC] : null;
                        var isSupport = ClickerSupportQuestion.includes(_this._context.QuestionOperate.getQuestionModel().type);
                        if (!isSupport && zhongTianDevice && zhongTianDevice.haveStudents && (padDevice.haveStudents || pcDevice.haveStudents)) {
                            var tipText = _this._context.getLangText("answer_client_not_support") || "不支持使用答题器作答该题";
                            var tipHtml = '<div class="ndui-toast__container" style="font-size: 0.5em;margin-bottom: -78em;">' + '<div class="ndui-toast__content">' + '<i class="ndui-toast__icon ndm-iconfont ndm-icon-warn"></i>' + '<span class="ndui-toast__text" style="font-size: 1.5em;">' + tipText + "</span>" + "</div>" + "</div>";
                            var el_1 = document.createElement("div");
                            $(el_1).addClass("ndui-toast");
                            $(el_1).addClass("ndui-toast--warn");
                            $(el_1).addClass("click_through");
                            $(el_1).html(tipHtml);
                            var $messagePanel_1;
                            if (_this._context.LayoutService && _this._context.LayoutService.getContainer) {
                                $messagePanel_1 = _this._context.LayoutService.getContainer("MessagePanel");
                            }
                            if ($messagePanel_1) {
                                $($messagePanel_1).append(el_1);
                            }
                            var questionModel = _this._context.QuestionOperate.getQuestionModel();
                            Tracker_1.track({
                                id: EventID_1.getEventId(EventID_1.EVENT_OFFSET_ID.SHOW_NOT_SUPPORT_CLICKER_TO_ANSWER_TOAST),
                                data: {
                                    tool: {
                                        id: questionModel.id
                                    },
                                    begin_time: Tracker_1.getTime()
                                }
                            });
                            _this.logger.debug("不支持使用答题器作答该题");
                            setTimeout((function() {
                                if ($messagePanel_1) {
                                    el_1.remove();
                                }
                            }), 3e3);
                        }
                        resolve();
                    }));
                }));
                this._context.QuestionInterceptOperate.pushBeforeIntercept("AnswerEquipmentIntercept", (function() {
                    return new Promise((function(resolve, reject) {
                        var questionModel = _this._context.QuestionOperate.getQuestionModel();
                        if (questionModel && questionModel.type && ClickerSupportQuestion.includes(questionModel.type)) {
                            var choices = _this._context.QuestionOperate.getQuestionModel().detail.simpleChoice;
                            var zhongTianDevice = _this._onlineStudentDevices ? _this._onlineStudentDevices[DeviceType.CLICKER] : null;
                            var option_num_limit = questionModel.type === "order" ? ORDER_OPTION_NUM_LIMIT : OTHER_OPTION_NUM_LIMIT;
                            if (choices.length > option_num_limit && zhongTianDevice && zhongTianDevice.haveStudents) {
                                _this.showMessageBox(questionModel.type, resolve, reject);
                                Tracker_1.track({
                                    id: EventID_1.getEventId(EventID_1.EVENT_OFFSET_ID.SHOW_OVER_CHOICE_DIALOG),
                                    data: {
                                        tool: {
                                            id: questionModel.id
                                        },
                                        begin_time: Tracker_1.getTime()
                                    }
                                });
                                return;
                            }
                        }
                        resolve();
                    }));
                }));
            };
            AnswerEquipmentOperate.prototype.bindEvent = function() {
                this._context.addEventListener(ConstVar_1.AnswerEquipmentEvent.RECEIVER_DEVICE_CALLBACK_EVENT, ConstVar_1.EVENT_TYPE.NATIVE_EVENT, this.receiverDeviceCallbackHandler);
                this._context.addEventListener(ConstVar_1.AnswerEquipmentEvent.SENDER_DEVICE_CALLBACK_EVENT, ConstVar_1.EVENT_TYPE.NATIVE_EVENT, this.senderDeviceCallbackHandler);
            };
            AnswerEquipmentOperate.prototype.showMessageBox = function(questionType, resolve, reject) {
                var _this = this;
                var tipText = this._context.getLangText("option_num_exceed_tip") || "当前题目选项超出答题器作答范围，请将选项控制在10个以内；继续发送任务可能影响使用答题器的同学正常答题，是否继续发送？";
                if (questionType === "order") {
                    tipText = this._context.getLangText("order_option_num_exceed_tip") || "当前题目选项超出答题器作答范围，请将选项控制在9个以内；继续发送任务可能影响使用答题器的同学正常答题，是否继续发送？";
                    this.logger.debug("当前习题为排序题，提示【选项控制在9个以内】");
                }
                PopFactory_1.PopFactory.get("mulMsgRmk").show({
                    type: "confirm",
                    text: tipText,
                    buttons: [ {
                        text: this._context.getLangText("submit_cancel"),
                        handle: function() {
                            PopFactory_1.PopFactory.get("mulMsgRmk").hide();
                            _this._cancelSend(reject);
                        }
                    }, {
                        text: this._context.getLangText("submit_confirm"),
                        handle: function() {
                            PopFactory_1.PopFactory.get("mulMsgRmk").hide();
                            _this.confirmSendQuestion(resolve);
                        }
                    } ]
                });
            };
            return AnswerEquipmentOperate;
        }();
        exports.default = AnswerEquipmentOperate;
    },
    "./presenters/AnswerFlowController/src/operates/AnswerInterceptOperate.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var AnswerInterceptOperate = function() {
            function AnswerInterceptOperate(context) {
                this.answerInterceptService = [];
                this.mContext = context;
                this.answerInterceptService = [];
            }
            AnswerInterceptOperate.prototype.pushService = function(service) {
                this.answerInterceptService.push(service);
            };
            AnswerInterceptOperate.prototype.getInterceptId = function() {
                if (this.answerInterceptService && this.answerInterceptService.length > 0) {
                    return this.answerInterceptService[0].getInterceptId();
                }
                return null;
            };
            AnswerInterceptOperate.prototype.beforeSendAnswer = function(sendData) {
                this.answerInterceptService.forEach((function(item, i) {
                    if (item.getInterceptId() === sendData.questionId) {
                        item.beforeSendAnswer(sendData);
                    }
                }));
            };
            AnswerInterceptOperate.prototype.afterSendAnswer = function(data) {
                this.answerInterceptService.forEach((function(item, i) {
                    if (item.getInterceptId() === data.questionId) {
                        item.afterSendAnswer(data);
                    }
                }));
            };
            return AnswerInterceptOperate;
        }();
        exports.default = AnswerInterceptOperate;
    },
    "./presenters/AnswerFlowController/src/operates/ExerciseOperate.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ExerciseOperate = function() {
            function ExerciseOperate(context) {
                this.service = [];
                this.mContext = context;
                this.service = [];
            }
            ExerciseOperate.prototype.pushService = function(service) {
                this.service.push(service);
            };
            ExerciseOperate.prototype.getExerciseData = function(data) {
                this.service.forEach((function(item, i) {
                    if (item.getExerciseData) {
                        item.getExerciseData(data);
                    }
                }));
            };
            return ExerciseOperate;
        }();
        exports.default = ExerciseOperate;
    },
    "./presenters/AnswerFlowController/src/operates/QuestionInterceptOperate.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var QuestionInterceptOperate = function() {
            function QuestionInterceptOperate(context) {
                this._context = context;
                this._beforeIntercepts = [];
                this._afterIntercepts = [];
            }
            Object.defineProperty(QuestionInterceptOperate.prototype, "logger", {
                get: function() {
                    return this._context.Logger;
                },
                enumerable: true,
                configurable: true
            });
            QuestionInterceptOperate.prototype.pushBeforeIntercept = function(name, intercept) {
                this._beforeIntercepts.push({
                    name: name,
                    intercept: intercept
                });
            };
            QuestionInterceptOperate.prototype.pushAfterIntercept = function(name, intercept) {
                this._afterIntercepts.push({
                    name: name,
                    intercept: intercept
                });
            };
            QuestionInterceptOperate.prototype.runBeforeIntercept = function() {
                return __awaiter(this, void 0, void 0, (function() {
                    var _loop_1, this_1, _i, _a, obj;
                    return __generator(this, (function(_b) {
                        switch (_b.label) {
                          case 0:
                            _loop_1 = function(obj) {
                                return __generator(this, (function(_a) {
                                    switch (_a.label) {
                                      case 0:
                                        this_1.logger.debug("run before intercept(" + obj.name + ")");
                                        return [ 4, obj.intercept.apply(null).catch((function(e) {
                                            throw new Error("runBeforeIntercept,a intercept(" + obj.name + ") was error");
                                        })) ];

                                      case 1:
                                        _a.sent();
                                        return [ 2 ];
                                    }
                                }));
                            };
                            this_1 = this;
                            _i = 0, _a = this._beforeIntercepts;
                            _b.label = 1;

                          case 1:
                            if (!(_i < _a.length)) return [ 3, 4 ];
                            obj = _a[_i];
                            return [ 5, _loop_1(obj) ];

                          case 2:
                            _b.sent();
                            _b.label = 3;

                          case 3:
                            _i++;
                            return [ 3, 1 ];

                          case 4:
                            return [ 2 ];
                        }
                    }));
                }));
            };
            QuestionInterceptOperate.prototype.runAfterIntercept = function() {
                return __awaiter(this, void 0, void 0, (function() {
                    var _loop_2, this_2, _i, _a, obj;
                    return __generator(this, (function(_b) {
                        switch (_b.label) {
                          case 0:
                            _loop_2 = function(obj) {
                                return __generator(this, (function(_a) {
                                    switch (_a.label) {
                                      case 0:
                                        this_2.logger.debug("run after intercept(" + obj.name + ")");
                                        return [ 4, obj.intercept.apply(null).catch((function(e) {
                                            throw new Error("unAfterIntercept,a intercept(" + obj.name + ") was error");
                                        })) ];

                                      case 1:
                                        _a.sent();
                                        return [ 2 ];
                                    }
                                }));
                            };
                            this_2 = this;
                            _i = 0, _a = this._afterIntercepts;
                            _b.label = 1;

                          case 1:
                            if (!(_i < _a.length)) return [ 3, 4 ];
                            obj = _a[_i];
                            return [ 5, _loop_2(obj) ];

                          case 2:
                            _b.sent();
                            _b.label = 3;

                          case 3:
                            _i++;
                            return [ 3, 1 ];

                          case 4:
                            return [ 2 ];
                        }
                    }));
                }));
            };
            return QuestionInterceptOperate;
        }();
        exports.default = QuestionInterceptOperate;
    },
    "./presenters/AnswerFlowController/src/operates/QuestionServieOperate.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var QuestionServieOperate = function() {
            function QuestionServieOperate(context) {
                this.mContext = context;
                this.questionServiceList = [];
            }
            QuestionServieOperate.prototype.isSubjective = function() {
                var qInfo = this.getInfo();
                if (qInfo) {
                    var isSubjective = qInfo.subjective;
                    if (typeof isSubjective == typeof undefined && ConstVar_1.SUBJECTIVE_QUESTION_TYPE.indexOf(qInfo.type_code.toLowerCase()) > -1) {
                        isSubjective = true;
                    }
                    return !!isSubjective;
                }
                return false;
            };
            QuestionServieOperate.prototype.hasCorrectOrKeyAnswer = function() {
                var qInfo = this.getInfo();
                if (qInfo) {
                    if (typeof qInfo.hasCorrectAnswer === "boolean") {
                        return qInfo.hasCorrectAnswer;
                    }
                    var isSubjective = qInfo.subjective;
                    if (typeof isSubjective == typeof undefined && ConstVar_1.SUBJECTIVE_QUESTION_TYPE.indexOf(qInfo.type_code.toLowerCase()) > -1) {
                        isSubjective = true;
                    }
                    return !isSubjective;
                }
                return true;
            };
            QuestionServieOperate.prototype.pushService = function(service) {
                this.questionServiceList.push(service);
                if (!this.mainService) {
                    this.mainService = service;
                }
                var info = service.getQuestionInfo();
                var qId = this.mContext.Option.questionId;
                if (qId && info && qId === info.id) {
                    this.mainService = service;
                }
            };
            QuestionServieOperate.prototype.getInfo = function() {
                return this.mainService ? this.mainService.getQuestionInfo() : undefined;
            };
            QuestionServieOperate.prototype.getQuestionModel = function() {
                if (this.mainService && this.mainService.getQuestionModel) {
                    return this.mainService.getQuestionModel();
                }
                return "";
            };
            QuestionServieOperate.prototype.getAnswerState = function() {
                if (this.mainService && this.mainService.getAnswerState) {
                    return this.mainService.getAnswerState();
                }
                return "";
            };
            QuestionServieOperate.prototype.getExtendData = function() {
                if (this.mainService && this.mainService.getExtendData) return this.mainService.getExtendData();
            };
            QuestionServieOperate.prototype.getTipType = function() {
                if (this.mainService && this.mainService.getTipType) {
                    var tipType = this.mainService.getTipType();
                    var needTipType = this.isNeedTip();
                    if (needTipType === false) {
                        tipType = ConstVar_1.TIP_TYPE.NONE;
                    }
                    return tipType;
                }
                return "";
            };
            QuestionServieOperate.prototype.isNeedTip = function() {
                if (this.mainService && this.mainService.isNeedTip) {
                    return this.mainService.isNeedTip();
                }
                return true;
            };
            QuestionServieOperate.prototype.getPreProcess = function() {
                if (this.mainService && this.mainService.getPreProcess) {
                    return this.mainService.getPreProcess();
                }
                return null;
            };
            QuestionServieOperate.prototype.getAnswer = function(resultArgs) {
                var _this = this;
                var deferred = $.Deferred();
                var temp = this.mainService.getResult(resultArgs);
                if (temp.answerState === false) {
                    temp.answerState = "NO_ANSWER";
                } else if (temp.answerState === true) {
                    if (temp.answer.answer_result) {
                        temp.answerState = "COMPLETE";
                    } else {
                        temp.answerState = "NO_COMPLETE";
                    }
                }
                if (temp.answer.user_response.length == 1 && temp.answer.user_response[0]["then"]) {
                    temp.answer.user_response[0].then((function(data) {
                        temp.answer.user_response[0] = data;
                        temp = $.extend(true, {}, temp);
                        deferred.resolve(temp);
                        _this.mContext.Logger.debug("处理延迟的答案结束", temp);
                    }));
                } else {
                    temp = $.extend(true, {}, temp);
                    deferred.resolve(temp);
                    this.mContext.Logger.debug("处理非延迟的答案结束", temp);
                }
                return deferred;
            };
            QuestionServieOperate.prototype.changeState = function(sequence) {
                if (!sequence || sequence.length <= 0) {
                    this.mContext.Logger.error("题目状态变更顺序函数错误");
                    return;
                }
                var item = this.mainService;
                if (!item) {
                    return false;
                }
                $.each(sequence, (function(method, params) {
                    if (item[method] && $.isFunction(item[method])) {
                        item[method].call(item, params);
                    }
                }));
                return true;
            };
            QuestionServieOperate.prototype.showAnswer = function(type, answer, param) {
                this.mainService.showAnswer(type, answer, param);
            };
            QuestionServieOperate.prototype.showCheckAnswer = function(type, answer) {
                this.showAnswer(type, answer, {
                    showResult: true
                });
            };
            QuestionServieOperate.prototype.lock = function(param) {
                if (param === void 0) {
                    param = {};
                }
                this.changeState({
                    lockQuestion: param
                });
            };
            QuestionServieOperate.prototype.unLock = function(param) {
                if (param === void 0) {
                    param = {};
                }
                this.changeState({
                    unlockQuestion: param
                });
            };
            QuestionServieOperate.prototype.pause = function(param) {
                if (param === void 0) {
                    param = {};
                }
                this.changeState({
                    pauseQuestion: param
                });
            };
            QuestionServieOperate.prototype.showHint = function(trigger, spendTime, noSubmit) {
                if (spendTime === void 0) {
                    spendTime = 0;
                }
                if (noSubmit === void 0) {
                    noSubmit = true;
                }
                this.mainService.showResultHint({
                    trigger: trigger,
                    spendTime: spendTime,
                    noSubmit: noSubmit
                });
            };
            QuestionServieOperate.prototype.reset = function(param) {
                if (param === void 0) {
                    param = {};
                }
                this.changeState({
                    resetQuestion: param
                });
            };
            QuestionServieOperate.prototype.finish = function(param) {
                if (param === void 0) {
                    param = {};
                }
                this.changeState({
                    finishQuestion: param
                });
            };
            QuestionServieOperate.prototype.hasAnalysis = function() {
                var deferred = $.Deferred();
                if ($.isFunction(this.mainService.hasAnalysis)) {
                    var re = this.mainService.hasAnalysis();
                    if (re["then"]) {
                        re.then((function(r) {
                            deferred.resolve(r);
                        }));
                    } else {
                        deferred.resolve(re);
                    }
                } else {
                    deferred.resolve(false);
                }
                return deferred;
            };
            QuestionServieOperate.prototype.setAnalysisVisible = function(visible) {
                if ($.isFunction(this.mainService.setAnalysisVisible)) {
                    this.mainService.setAnalysisVisible(visible);
                }
            };
            QuestionServieOperate.prototype.hasHint = function() {
                var deferred = $.Deferred();
                if ($.isFunction(this.mainService.hasHint)) {
                    var re = this.mainService.hasHint();
                    if (re["then"]) {
                        re.then((function(r) {
                            deferred.resolve(r);
                        }));
                    } else {
                        deferred.resolve(re);
                    }
                } else {
                    deferred.resolve(false);
                }
                return deferred;
            };
            QuestionServieOperate.prototype.setHintVisible = function(visible) {
                if ($.isFunction(this.mainService.setHintVisible)) {
                    this.mainService.setHintVisible(visible);
                }
            };
            QuestionServieOperate.prototype.beforeSubmit = function() {
                if (this.mainService && $.isFunction(this.mainService.beforeSubmit)) {
                    return this.mainService.beforeSubmit();
                }
                return true;
            };
            return QuestionServieOperate;
        }();
        exports.default = QuestionServieOperate;
    },
    "./presenters/AnswerFlowController/src/operates/SubmitButtonOperate.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var SubmitButtonOperate = function() {
            function SubmitButtonOperate(context) {
                this.mContext = context;
            }
            SubmitButtonOperate.prototype.setService = function(service) {
                if (!this.submitButtonService) {
                    this.submitButtonService = service;
                }
            };
            SubmitButtonOperate.prototype.setButtonState = function(state) {
                if (this.submitButtonService) {
                    this.submitButtonService.setButtonState(state);
                }
            };
            SubmitButtonOperate.prototype.getButtonState = function() {
                if (this.submitButtonService) {
                    return this.submitButtonService.getButtonState();
                }
                return null;
            };
            SubmitButtonOperate.prototype.getState = function() {
                if (this.submitButtonService) {
                    return this.submitButtonService.getState();
                }
                return null;
            };
            SubmitButtonOperate.prototype.setVisible = function(visible) {
                if (this.submitButtonService) {
                    this.submitButtonService.setVisible(visible);
                }
            };
            return SubmitButtonOperate;
        }();
        exports.default = SubmitButtonOperate;
    },
    "./presenters/AnswerFlowController/src/operates/TimerOperate.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var TimerOperate = function() {
            function TimerOperate(context) {
                this.mContext = context;
            }
            TimerOperate.prototype.setService = function(service) {
                this.timerService = service;
            };
            TimerOperate.prototype.start = function(isUseModel, startTime) {
                if (this.timerService) {
                    this.timerService.start(isUseModel, startTime);
                }
            };
            TimerOperate.prototype.stop = function() {
                if (this.timerService) {
                    this.timerService.stop();
                }
            };
            TimerOperate.prototype.resetPauseUp = function() {
                if (this.timerService) {
                    this.timerService.stop();
                    this.timerService.start(false);
                }
            };
            TimerOperate.prototype.pause = function(isStopTime) {
                if (this.timerService) {
                    this.timerService.pause(isStopTime);
                }
            };
            TimerOperate.prototype.setTimeValue = function(timestamp) {
                if (this.timerService) {
                    this.timerService.setTimeValue(timestamp);
                }
            };
            TimerOperate.prototype.getTimeValue = function() {
                if (this.timerService) {
                    return this.timerService.getTimeValue();
                }
            };
            return TimerOperate;
        }();
        exports.default = TimerOperate;
    },
    "./presenters/AnswerFlowController/src/operates/TrackerOperate.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var co_global_1 = __webpack_require__("@sdp.nd/co-global");
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var Tracker_1 = __webpack_require__("./presenters/AnswerFlowController/src/tracker/Tracker.ts");
        var TrackerOperate = function() {
            function TrackerOperate(mContext) {
                this.mContext = mContext;
                this.totalStuNum = 0;
                this.submittedStuNum = 0;
                this.loadStartTime = 0;
                this.loadEndTime = 0;
                this.loadDurationTime = 0;
                this.init();
            }
            TrackerOperate.prototype.init = function() {
                this.bindEvent();
                this.loadStartTime = Date.now();
            };
            TrackerOperate.prototype.bindEvent = function() {
                var _this = this;
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.PRESENTER_LOADED, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, (function() {
                    _this.loadEndTime = Date.now();
                    _this.loadDurationTime = (_this.loadEndTime - _this.loadStartTime + 500) / 1e3;
                    _this.onEduQuestionPlayEnter();
                }));
                if (co_global_1.AviMediaPlayer && co_global_1.AviMediaPlayer.mediaOnImageOpen) {
                    co_global_1.AviMediaPlayer.mediaOnImageOpen((function(eventData) {
                        _this.onEduQuestionZoomin(eventData);
                    }));
                }
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.ZOOM_IMG_OR_TXT, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, (function(eventData) {
                    _this.onEduQuestionZoomin(eventData);
                }));
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, (function() {
                    _this.onEduQuestionAnswerSubmit();
                }));
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.SEND_ANSWER_BY_TEACHER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, (function() {
                    _this.onEduQuestionAnswerSubmit();
                }));
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.SHOW_CORRECT_ANSWER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, (function() {
                    _this.onEduQuestionClassroomShowAnswer();
                }));
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.SHOW_QUIZ_PROGRESS, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, (function() {
                    _this.onEduQuestionClassroomProgress();
                }));
                this.mContext.addEventListener(ConstVar_1.CLASSROOM_EVENT_NAME.EXERCISE_STATE_CHANGE, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, (function(eventData) {
                    switch (eventData.type) {
                      case "start":
                        if (eventData.value.result != false) {
                            _this.onEduQuestionClassroomSend();
                        }
                        break;

                      case "mockStop":
                        if (eventData.value.result != false) {
                            _this.onEduQuestionClassroomCollect();
                        }
                        break;

                      case "exit":
                        _this.onEduQuestionClassroomExit();
                        break;

                      default:
                        break;
                    }
                }));
                this.mContext.addEventListener("QuizProgressDetailCallback", ConstVariable.PresenterEventType.NATIVE_EVENT, (function(eventData) {
                    _this.onQuizProgressUpdate(eventData);
                }));
            };
            TrackerOperate.prototype.onQuizProgressUpdate = function(eventData) {
                if (eventData && eventData.value && eventData.value.users) {
                    var students = eventData.value.users;
                    this.totalStuNum = students.length;
                    this.submittedStuNum = students.filter((function(item) {
                        return item.status === "committed";
                    })).length;
                }
            };
            TrackerOperate.prototype.onEduQuestionPlayEnter = function() {
                this.track("edu_question_play_enter", {
                    loading_time: this.loadDurationTime
                });
            };
            TrackerOperate.prototype.onEduQuestionZoomin = function(eventData) {
                var zoomType = eventData ? eventData.type || "" : "";
                var zoomTextLen = eventData && eventData.value ? eventData.value.length || 0 : 0;
                this.track("edu_question_zoomin", {
                    zoom_type: zoomType,
                    zoom_text_length: zoomTextLen
                });
            };
            TrackerOperate.prototype.onEduQuestionAnswerSubmit = function() {
                var hasAnswer = this.mContext.questionOperate.mainService.getResult().answerState !== "NO_ANSWER";
                this.track("edu_question_answer_submit", {
                    answer_time: this.mContext.timerOperate.getTimeValue(),
                    has_answer: hasAnswer
                });
            };
            TrackerOperate.prototype.onEduQuestionClassroomSend = function() {
                this.track("edu_question_classroom_send", {});
            };
            TrackerOperate.prototype.onEduQuestionClassroomShowAnswer = function() {
                this.track("edu_question_classroom_showanswer", {});
            };
            TrackerOperate.prototype.onEduQuestionClassroomProgress = function() {
                this.track("edu_question_classroom_progress", {});
            };
            TrackerOperate.prototype.onEduQuestionClassroomCollect = function() {
                this.track("edu_question_classroom_collect", {
                    answer_time: this.mContext.timerOperate.getTimeValue(),
                    submit_num: this.submittedStuNum + "/" + this.totalStuNum
                });
            };
            TrackerOperate.prototype.onEduQuestionClassroomExit = function() {
                this.track("edu_question_classroom_exit", {});
            };
            TrackerOperate.prototype.track = function(id, data) {
                var role = this.mContext.Environment.isStudent ? "student" : "teacher";
                var questionInfo = this.mContext.questionOperate.mainService.getQuestionInfo();
                Tracker_1.trackV2({
                    id: id,
                    data: __assign({
                        role: role,
                        question_code: questionInfo.type_code,
                        question_name: questionInfo.type_name,
                        question_skin_code: questionInfo.skin_code || "wood",
                        question_skin_name: questionInfo.skin_name || ""
                    }, data)
                });
            };
            return TrackerOperate;
        }();
        exports.default = TrackerOperate;
    },
    "./presenters/AnswerFlowController/src/presenter.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ServiceObject_1 = __webpack_require__("./presenters/AnswerFlowController/src/ServiceObject.ts");
        var AnswerFlowControlObject_1 = __webpack_require__("./presenters/AnswerFlowController/src/AnswerFlowControlObject.ts");
        var QuestionServieOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/QuestionServieOperate.ts");
        var AnswerInterceptOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/AnswerInterceptOperate.ts");
        var QuestionInterceptOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/QuestionInterceptOperate.ts");
        var AnswerEquipmentOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/AnswerEquipmentOperate.ts");
        var SubmitButtonOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/SubmitButtonOperate.ts");
        var ExerciseOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/ExerciseOperate.ts");
        var TimerOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/TimerOperate.ts");
        var TrackerOperate_1 = __webpack_require__("./presenters/AnswerFlowController/src/operates/TrackerOperate.ts");
        var PopFactory_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/PopFactory.ts");
        var ControllerState_1 = __webpack_require__("./presenters/AnswerFlowController/src/ControllerState.ts");
        var ModeBuilder_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/ModeBuilder.ts");
        var FlowModule_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/FlowModule.ts");
        var ToolbarModule_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/ToolbarModule.ts");
        var Lang_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/Lang.ts");
        var ModeBus_1 = __webpack_require__("./presenters/AnswerFlowController/src/modes/ModeBus.ts");
        var AnswerFlowController = function(_super) {
            __extends(AnswerFlowController, _super);
            function AnswerFlowController() {
                var _this = _super.call(this, "AnswerFlowController") || this;
                _this.initGlobalEventKey();
                _this.metaInfo.name = "AnswerFlowController";
                _this.metaInfo.type = ConstVariable.PresenterType.CONTROLLER;
                _this.option = {};
                _this.lang = {};
                _this.bus = new ModeBus_1.default;
                _this.serviceObj = new ServiceObject_1.default(_this);
                _this.ControlService = new AnswerFlowControlObject_1.default(_this);
                _this.state = new ControllerState_1.default(_this);
                _this.questionOperate = new QuestionServieOperate_1.default(_this);
                _this.submitButtonOperate = new SubmitButtonOperate_1.default(_this);
                _this.answerInterceptOperate = new AnswerInterceptOperate_1.default(_this);
                _this.questionInterceptOperate = new QuestionInterceptOperate_1.default(_this);
                _this.answerEquipmentOperate = new AnswerEquipmentOperate_1.default(_this);
                _this.exerciseOperate = new ExerciseOperate_1.default(_this);
                _this.timerOperate = new TimerOperate_1.default(_this);
                if (!_this.__interface) {
                    _this.__interface = {};
                }
                _this.__interface.startCommentSuccess = function() {
                    PopFactory_1.PopFactory.get("submitter").hide();
                };
                return _this;
            }
            AnswerFlowController.prototype.getMetaInfoName = function() {
                return this.metaInfo.name;
            };
            AnswerFlowController.prototype.getMetaInfoName = function() {
                return this.metaInfo.name;
            };
            Object.defineProperty(AnswerFlowController.prototype, "AnswerInterceptOperate", {
                get: function() {
                    return this.answerInterceptOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "QuestionInterceptOperate", {
                get: function() {
                    return this.questionInterceptOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "AnswerEquipmentOperate", {
                get: function() {
                    return this.answerEquipmentOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "SubmitButtonOperate", {
                get: function() {
                    return this.submitButtonOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "QuestionOperate", {
                get: function() {
                    return this.questionOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "ExerciseOperate", {
                get: function() {
                    return this.exerciseOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "TimerOperate", {
                get: function() {
                    return this.timerOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "TrackerOperate", {
                get: function() {
                    return this.trackerOperate;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "Bus", {
                get: function() {
                    return this.bus;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "Interface", {
                get: function() {
                    return this.__interface;
                },
                enumerable: true,
                configurable: true
            });
            AnswerFlowController.prototype.getLangText = function(key) {
                if (this.lang[key] == undefined) return "ERROR";
                return this.lang[key];
            };
            Object.defineProperty(AnswerFlowController.prototype, "Option", {
                get: function() {
                    return this.option;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "State", {
                get: function() {
                    return this.state;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AnswerFlowController.prototype, "QuestionMode", {
                get: function() {
                    return this.questionModel;
                },
                enumerable: true,
                configurable: true
            });
            AnswerFlowController.prototype.$launch = function(option) {
                this.Logger.setLevel(ConstVariable.PresenterLogLevel.DEBUG);
                this.lang = $.extend(true, {}, Lang_1.default, option.lang || {});
                this.initEnv();
                var builder = new ModeBuilder_1.default(this);
                builder.setFlowModule(new FlowModule_1.default(this));
                if (!this.option.isPreview && this.option.runtime.isTeacher) {
                    builder.setToolbarModule(new ToolbarModule_1.default(this));
                }
                this.trackerOperate = new TrackerOperate_1.default(this);
                this.questionModel = builder.build();
                this.questionModel.init();
                PopFactory_1.PopFactory.init(this);
                PopFactory_1.PopFactory.get("submitter").hide();
            };
            AnswerFlowController.prototype.initEnv = function() {
                var option = this.option;
                var loadSendQuestion = true;
                if (this.Model.loadSendQuestion === false || this.Model.loadSendQuestion === "false") {
                    loadSendQuestion = false;
                }
                if (this.QueryString["loadSendQuestion"] && this.QueryString["loadSendQuestion"] == "false") {
                    loadSendQuestion = false;
                }
                var showResultOnSubmit = this.Model.showResultOnSubmit === true || this.Model.showResultOnSubmit === "true";
                option.questionId = this.Model.linkQuestionId || undefined;
                option.loadSendQuestion = loadSendQuestion;
                option.showResultOnSubmit = showResultOnSubmit;
                option.showResultOnFinish = this.Model.showResultOnFinish === true || this.Model.showResultOnFinish === "true";
                option.skin = this.Model.skin;
                option.useH5MessageBox = this.Model.useH5MessageBox === true;
                option.app = this.QueryString["app"];
                option.sys = this.QueryString["sys"];
                option.inject = this.QueryString["inject"];
                option.isPreview = this.QueryString["isPreview"];
                var runtimeNew = window.player.getPlayerServices().getRuntimeNew();
                var platform = runtimeNew.platform;
                var role = runtimeNew.role;
                option.runtime = {
                    isApp: platform == icCreatePlayer.RUNTIMENEW.PLATFORM.MOBILE,
                    isWeb: platform == icCreatePlayer.RUNTIMENEW.PLATFORM.WEB,
                    isPC: platform == icCreatePlayer.RUNTIMENEW.PLATFORM.PC,
                    isTeacher: role == icCreatePlayer.RUNTIMENEW.ROLE.TEACHER,
                    isStudent: role == icCreatePlayer.RUNTIMENEW.ROLE.STUDENT
                };
                option.platform = {
                    pptShell: option.sys === "pptshell"
                };
                option.app = {
                    questionBag: option.app === "question_bag",
                    exercise: option.app === "exercise"
                };
            };
            AnswerFlowController.prototype.$release = function() {
                if (this.questionModel) {
                    this.questionModel.destroy();
                }
                PopFactory_1.PopFactory.get("submitter").hide();
                PopFactory_1.PopFactory.destroy();
            };
            AnswerFlowController.prototype.getService = function() {
                if (this.serviceObj === undefined) {
                    this.serviceObj = new ServiceObject_1.default(this);
                }
                return this.serviceObj;
            };
            AnswerFlowController.prototype.initGlobalEventKey = function() {
                if (!window.$PresenterEvent) {
                    window.$PresenterEvent = {};
                }
                window.$PresenterEvent["AnswerFlowController"] = {
                    SEND_ANSWER: "sendAnswer",
                    SEND_ANSWER_CALLBACK: "sendAnswerCallback",
                    SEND_ANSWER_STOP: "sendAnswerStop",
                    EXERCISE_STATE_CHANGE: "exerciseStateChange",
                    QUESTION_STATE_CHANGE: "questionStateChange",
                    EMBEDDED_QUESTION_STATE_CHANGE: "embeddedQuestionStateChange",
                    AUTO_SEND_ANSWER: "autoSendAnswer",
                    PREVIEW_SHOW_CORRECT_ANSWER: "PreviewShowCorrectAnswer",
                    SET_QUESTION_STATUS: "SetQuestionStatus",
                    EXERCISE_SUBMIT_ANSWER: "custom_event_submit_answer"
                };
            };
            return AnswerFlowController;
        }(CommonController);
        exports.AnswerFlowController = AnswerFlowController;
        function default_1() {
            return new AnswerFlowController;
        }
        exports.default = default_1;
    },
    "./presenters/AnswerFlowController/src/services/ClassroomStatus.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var QuestionState_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/common/QuestionState.ts");
        var ClassroomStatus = function() {
            function ClassroomStatus(context) {
                this.mContext = context;
                this.init();
            }
            ClassroomStatus.prototype.init = function() {
                var that = this, mContext = that.mContext;
                mContext.Bus.register(ConstVar_1.INTERNAL_EVENT_NAME.QUESTION_STATUS_CHANGE, (function(eventName, eventData) {
                    mContext.PlayerController.startFlow("css_classroom_status_changed", {
                        presenterCode: mContext.getMetaInfoName()
                    });
                }));
            };
            ClassroomStatus.prototype.setQuestionStateReset = function() {
                var that = this, mContext = that.mContext;
                if (that.crStatus) {
                    if (that.crStatus.showCorrectAnswer) {
                        var info = this.mContext.QuestionOperate.getInfo();
                        if (info && info.type_code && info.type_code.toLocaleLowerCase() === "compound") {} else {
                            QuestionState_1.default.resetTeacher(this.mContext);
                        }
                    }
                    if (that.crStatus.questionState === ConstVar_1.QUESTION_STATE_CODE.RESET) {
                        mContext.TimerOperate.resetPauseUp();
                        mContext.QuestionOperate.lock();
                        mContext.QuestionOperate.showAnswer("user");
                        that.crStatus = "";
                    }
                }
            };
            ClassroomStatus.prototype.getClassroomStatus = function() {
                var toolBar = this.mContext.QuestionMode.getToolBarModule();
                var showCorrectAnswer = false;
                if (toolBar) {
                    if (toolBar.getToolbar()) {
                        if (toolBar.getToolbar().getState(ConstVar_1.BAR_TYPE.BACK_ORIGINAL, "hidden") === false) {
                            showCorrectAnswer = true;
                        }
                    }
                }
                return {
                    questionState: this.mContext.State.questionState,
                    showCorrectAnswer: showCorrectAnswer
                };
            };
            ClassroomStatus.prototype.setClassroomStatus = function(status) {
                this.crStatus = status;
                this.mContext.State.questionState = this.crStatus.questionState;
                this.setQuestionStateReset();
            };
            ClassroomStatus.prototype.clearClassroomStatus = function() {
                this.crStatus = "";
            };
            return ClassroomStatus;
        }();
        exports.default = ClassroomStatus;
    },
    "./presenters/AnswerFlowController/src/tracker/EventID.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var EVENT_OFFSET_ID = {
            SUBMIT_QUESTION: "E4-2",
            MODIFY_QUESTION: "E4-3",
            RESUBMIT_QUESTION: "E4-4",
            SHOW_OVER_CHOICE_DIALOG: "E8-1",
            SHOW_OVER_CHOICE_DIALOG_CONFIRM: "E8-2",
            SHOW_OVER_CHOICE_DIALOG_CANCEL: "E8-3",
            SHOW_NOT_SUPPORT_CLICKER_TO_ANSWER_TOAST: "E8-4"
        };
        exports.EVENT_OFFSET_ID = EVENT_OFFSET_ID;
        var getEventId = function(id) {
            return id;
        };
        exports.getEventId = getEventId;
    },
    "./presenters/AnswerFlowController/src/tracker/Tracker.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var TrackerDecorator = function(arg) {
            return function(target, name, descriptor) {
                var oldValue = descriptor.value;
                descriptor.value = function() {
                    track(arg);
                    var result = oldValue.apply(this, arguments);
                    return result;
                };
            };
        };
        exports.TrackerDecorator = TrackerDecorator;
        var track = function(arg) {
            if (AnalyticsTracker && AnalyticsTracker.track) {
                AnalyticsTracker && AnalyticsTracker.track(arg["id"], arg["data"]);
            }
        };
        exports.track = track;
        var trackV2 = function(arg) {
            if (AnalyticsTracker && AnalyticsTracker.trackV2) {
                AnalyticsTracker && AnalyticsTracker.trackV2(arg["id"], arg["data"]);
            }
        };
        exports.trackV2 = trackV2;
        var getTime = function() {
            var time = "";
            if (AnalyticsTracker && AnalyticsTracker.getTime) {
                time = AnalyticsTracker.getTime();
            }
            return time;
        };
        exports.getTime = getTime;
        var TYPE = {
            TYPE_CLASSROOM: AnalyticsTracker.TYPE_CLASSROOM,
            TYPE_PPTSHELL: AnalyticsTracker.TYPE_PPTSHELL
        };
        exports.TYPE = TYPE;
    },
    "./presenters/AnswerFlowController/src/utils/ConstVar.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CLASSROOM_EVENT_NAME = {
            SEND_ANSWER: "sendAnswer",
            SEND_ANSWER_BY_TEACHER: "sendAnswerByTeacher",
            SEND_ANSWER_CALLBACK: "sendAnswerCallback",
            SEND_ANSWER_STOP: "sendAnswerStop",
            EXERCISE_STATE_CHANGE: "exerciseStateChange",
            QUESTION_STATE_CHANGE: "questionStateChange",
            EMBEDDED_QUESTION_STATE_CHANGE: "embeddedQuestionStateChange",
            AUTO_SEND_ANSWER: "autoSendAnswer",
            PRESENTER_LOADED: "PresenterLoaded",
            PREVIEW_SHOW_CORRECT_ANSWER: "PreviewShowCorrectAnswer",
            SET_QUESTION_STATUS: "SetQuestionStatus",
            AS_SEND_QUESTION: "asSendQuestion",
            EXERCISE_SUBMIT_ANSWER: "custom_event_submit_answer",
            GET_QUESTION_ANSWER: "getQuestionAnswer",
            SEND_QUESTION_ANSWER_TOCALLER: "sendQuestionAnswerToCaller",
            GET_QUESTION_ANSWER_CALLBACK: "getQuestionAnswerCallback",
            QF_SET_TOOLBAR_STATE: "qf_set_toolbar_state",
            QF_UPDATE_TOOLBAR_STATE: "qf_update_toolbar_state",
            CR_STATUS_STATICAL: "css_classroom_status_statical",
            SUBMIT_APPLY: "submit_apply",
            EXAM_CALL_BACK: "ExamCallback",
            SUBMIT_APPLY_IFNEEDED: "submit_apply_ifneeded",
            SHOW_CORRECT_ANSWER: "SHOW_CORRECT_ANSWER",
            SHOW_QUIZ_PROGRESS: "SHOW_QUIZ_PROGRESS",
            ZOOM_IMG_OR_TXT: "ZOOM_IMG_OR_TXT",
            RECEIVE_STUDENTS: "RECEIVE_STUDENTS"
        };
        exports.QUESTION_STATE_CODE = {
            CAN_NOT_SUBMIT: "can_not_submit",
            CAN_SUBMIT: "can_submit",
            CAN_MODIFY: "can_modify",
            RESET: "reset",
            FINISH: "finish",
            SUBMITTING: "submitting",
            RETRY_SUBMIT: "retry_submit",
            MODIFY_SUBMIT: "modify_submit"
        };
        exports.INTERNAL_EVENT_NAME = {
            TIME_UP: "time_up",
            QUESTION_STATUS_CHANGE: "question_status_change"
        };
        exports.EVENT_TYPE = {
            IC_PLAYER_EVENT: ConstVariable.PresenterEventType.IC_PLAYER_EVENT,
            NATIVE_EVENT: ConstVariable.PresenterEventType.NATIVE_EVENT,
            PPT_NATIVE_EVENT: ConstVariable.PresenterEventType.PPT_NATIVE_EVENT,
            INTERNAL: "internal",
            PLAYER_FLOW: "player_flow"
        };
        exports.BAR_TYPE = {
            SEND: "send",
            QB_RETURN: "qbReturn",
            QB_SHOW_CORRECT: "qbShowCorrect",
            SHOW_CORRECT_ANSWER: "show_correct_answer",
            SHOW_ANALYSIS: "show_analysis",
            SHOW_HINT: "show_hint",
            BACK_ORIGINAL: "back_original"
        };
        exports.SUBJECTIVE_QUESTION_TYPE = [ "newhandwrite", "handwrite", "write", "vote", "subjectivity", "composition", "mindjet", "freecombination", "sectionevaluating", "sentenceevaluating", "compound", "compositionoutline", "rolereading" ];
        exports.TIP_TYPE = {
            SIMPLE: "SIMPLE",
            MULTBLANK: "MULTBLANK",
            MULTQUESTION: "MULTQUESTION",
            PARTICAL: "PARTICAL",
            NONE: "NONE"
        };
        exports.COMPLETE_STATE = {
            UNANSWERED: "UNANSWERED",
            PARTICAL_ANSWERED: "PARTICAL_ANSWERED",
            ALL_ANSWERED: "ALL_ANSWERED"
        };
        exports.AnswerEquipmentEvent = {
            SENDER_DEVICE_EVENT: "SenderDeviceEvent",
            SENDER_DEVICE_CALLBACK_EVENT: "SenderDeviceCallbackEvent",
            RECEIVER_DEVICE_EVENT: "ReceiverDeviceEvent",
            RECEIVER_DEVICE_CALLBACK_EVENT: "ReceiverDeviceCallbackEvent"
        };
    },
    "./presenters/AnswerFlowController/src/utils/Lang.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var LANG = {
            submit_answer: "确认提交答案吗？",
            submit_confirm: "确认",
            submit_cancel: "取消",
            answer_right: "太棒啦，您答对啦！",
            answer_wrong: "这道题没有答对，下次加油哦！",
            send_task: "发送任务",
            submit_successfully: "提交成功",
            submit_failed: "提交失败",
            bag_return: "返回抽题",
            bag_show_answer: "公布答案",
            show_correct_answer: "查看答案",
            show_analysis: "查看解析",
            back_original: "查看原题",
            show_hint: "查看提示",
            unanswered_all: "你还未作答哦，确认提交吗？",
            unanswered_blank: "你还有${n}个空未完成，确认提交答案吗？",
            unanswered_question: "你还有${n}道题未完成，确认提交答案吗？",
            unanswered_partical: "你还未全部完成哦，确认提交答案吗？",
            listen: "请听老师讲解！"
        };
        exports.default = LANG;
    },
    "./presenters/AnswerFlowController/src/utils/StringUtils.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var StringUtils = {
            getUuid: function() {
                var s = [];
                var hexDigits = "0123456789abcdef";
                for (var i = 0; i < 36; i++) {
                    s[i] = hexDigits.substr(Math.floor(Math.random() * 16), 1);
                }
                s[14] = "4";
                s[19] = hexDigits.substr(s[19] & 3 | 8, 1);
                s[8] = s[13] = s[18] = s[23] = "-";
                var uuid = s.join("");
                return uuid;
            }
        };
        exports.default = StringUtils;
    },
    "./presenters/AnswerFlowController/src/utils/media.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function resetMedia() {
            var media = window.AviMediaPlayer;
            if (media && media.reset) {
                try {
                    media.reset();
                } catch (error) {
                    console.warn(error);
                }
            }
        }
        exports.resetMedia = resetMedia;
        function lockMedia() {
            var media = window.AviMediaPlayer;
            if (media && media.setLock) {
                try {
                    media.setLock(true);
                } catch (error) {
                    console.warn(error);
                }
            }
        }
        exports.lockMedia = lockMedia;
    },
    "./presenters/AnswerFlowController/src/view/native/SubmitDialog.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var StringUtils_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/StringUtils.ts");
        var SubmitDialog = function() {
            function SubmitDialog(context) {
                this.mContext = context;
                this.id = StringUtils_1.default.getUuid();
                this.callBack = [];
            }
            SubmitDialog.prototype.create = function() {
                var that = this;
                var result = this.callNative("createPresenter", {
                    presenterId: "subject_dialog",
                    instanceId: this.id,
                    initData: "{}"
                });
                this.mContext.addEventListener("CommonDialogCallBack", ConstVar_1.EVENT_TYPE.NATIVE_EVENT, (function(eventData, eventName) {
                    that.clickCallbackHandler(eventData);
                }));
                return result && result.success;
            };
            SubmitDialog.prototype.clickCallbackHandler = function(eventData) {
                if ($.isFunction(this.callBack[eventData.clickId])) {
                    this.callBack[eventData.clickId]();
                } else {
                    this.mContext.Logger.debug("SubmitDialog：找不到clickId:", eventData);
                }
            };
            SubmitDialog.prototype.showCommonDialog = function(data, callbacks) {
                this.callBack = callbacks || [];
                this.sendToPresenter("showCommonDialog", data);
            };
            SubmitDialog.prototype.showCartoonDialog = function(data) {
                this.sendToPresenter("showCartoonBodyBox", data);
            };
            SubmitDialog.prototype.hide = function() {
                this.sendToPresenter("dismissDialog", {
                    dialogId: 0
                });
            };
            SubmitDialog.prototype.destroy = function() {
                this.callNative("destroyPresenter", {
                    instanceId: this.id
                });
            };
            SubmitDialog.prototype.callNative = function(name, data) {
                return this.mContext.dispatchEvent(name, ConstVar_1.EVENT_TYPE.NATIVE_EVENT, data);
            };
            SubmitDialog.prototype.sendToPresenter = function(type, data) {
                return this.callNative("sendToPresenter", {
                    instanceId: this.id,
                    type: type,
                    data: data
                });
            };
            return SubmitDialog;
        }();
        exports.default = SubmitDialog;
    },
    "./presenters/AnswerFlowController/src/view/pop/MessageBoxRemakePop.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MessageBoxRemakePop = {
            popup: null,
            init: function(context) {
                MessageBoxRemake.init({
                    container: context.LayoutService && context.LayoutService.getContainer("MessagePanel") || null,
                    skin: context.Option.skin
                });
            },
            show: function(param) {
                var container = param.container;
                $(container).show();
                delete param.container;
                this.hide();
                this.popup = MessageBoxRemake.showPop(container, param);
            },
            hide: function() {
                if (this.popup && this.popup.hide) {
                    this.popup.hide();
                }
            },
            destroy: function() {
                this.hide();
            }
        };
    },
    "./presenters/AnswerFlowController/src/view/pop/MulSubmitDialog.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var MessageBoxRemakePop_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/MessageBoxRemakePop.ts");
        var SubmitDialog_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/native/SubmitDialog.ts");
        var MulSubmitDialog = function() {
            function MulSubmitDialog(context) {
                this.mContext = context;
            }
            MulSubmitDialog.prototype.create = function() {
                this.submitDialog = new SubmitDialog_1.default(this.mContext);
                var result = this.submitDialog.create();
                this.isApp = this.mContext.Option.runtime.isStudent && this.mContext.Option.runtime.isApp && result;
                if (this.mContext.Option.runtime.isPC || this.mContext.Option.useH5MessageBox) {
                    this.isApp = false;
                }
                this.skin = this.mContext.Option.skin;
            };
            MulSubmitDialog.prototype.show = function(param) {
                if (param.type === "confirm") {
                    this.confirm(param);
                } else if (param.type === "cartoonError" || param.type === "cartoonRight") {
                    param.type = param.type === "cartoonError" ? "error" : "right";
                    this.cartoonCheck(param);
                } else if (param.type === "error" || param.type === "right") {
                    this.normalCheck(param);
                }
            };
            MulSubmitDialog.prototype.hide = function() {
                if (this.isApp) {
                    this.submitDialog.hide();
                } else {
                    MessageBoxRemakePop_1.MessageBoxRemakePop.hide();
                }
            };
            MulSubmitDialog.prototype.showConfirm = function(data) {
                this.confirm(data);
            };
            MulSubmitDialog.prototype.showCartoonFeedback = function(data) {
                this.cartoonCheck(data);
            };
            MulSubmitDialog.prototype.showNormalFeedback = function(data) {
                this.normalCheck(data);
            };
            MulSubmitDialog.prototype.confirm = function(data) {
                if (this.isApp) {
                    var popData_1 = {
                        content: data.text,
                        noRemindCheck: {
                            text: "",
                            isShow: false,
                            isChecked: false
                        },
                        leftBtn: {},
                        rightBtn: {}
                    }, callbacks_1 = [], btn_1;
                    data.buttons.forEach((function(item, index) {
                        btn_1 = {
                            text: item.text,
                            isPositive: false
                        };
                        if (index === 0) {
                            popData_1.leftBtn = btn_1;
                        } else {
                            popData_1.rightBtn = btn_1;
                        }
                        callbacks_1.push(item.handle);
                    }));
                    this.submitDialog.showCommonDialog(popData_1, callbacks_1);
                } else {
                    data.buttons.reverse();
                    var popData = Object.assign({
                        type: "confirm",
                        text: data.text,
                        buttons: data.buttons
                    }, this.getMessagePanelOption());
                    MessageBoxRemakePop_1.MessageBoxRemakePop.show(popData);
                }
            };
            MulSubmitDialog.prototype.normalCheck = function(data) {
                var hideTime = data.hideTime || 3e3;
                MessageBoxRemakePop_1.MessageBoxRemakePop.show(Object.assign({
                    type: data.type,
                    text: data.text,
                    hideTime: hideTime
                }, this.getMessagePanelOption()));
            };
            MulSubmitDialog.prototype.cartoonCheck = function(data) {
                var hideTime = data.hideTime || 3e3;
                if (this.isApp) {
                    var popData = {
                        cartoonStyle: data.type === "error" ? "afu_02" : "afu_01",
                        content: data.text,
                        dismissDelayed: hideTime,
                        canceledOnTouchOutside: false
                    };
                    this.submitDialog.showCartoonDialog(popData);
                } else {
                    MessageBoxRemakePop_1.MessageBoxRemakePop.show(Object.assign({
                        type: data.type === "error" ? "afuerror" : "afuright",
                        text: data.text,
                        hideTime: hideTime
                    }, this.getMessagePanelOption()));
                }
            };
            MulSubmitDialog.prototype.getMessagePanelOption = function() {
                var data = {
                    container: "",
                    mode: ""
                };
                data.container = this.mContext.LayoutService.getContainer("MessagePanel");
                if (!data.container || !data.container.get(0)) {
                    data.container = $(this.mContext.View).find(".dialog_container");
                    data.mode = "wood";
                }
                if (this.skin) {
                    data.mode = this.skin;
                }
                return data;
            };
            MulSubmitDialog.prototype.destroy = function() {
                this.submitDialog.destroy();
                MessageBoxRemakePop_1.MessageBoxRemakePop.destroy();
            };
            return MulSubmitDialog;
        }();
        exports.default = MulSubmitDialog;
    },
    "./presenters/AnswerFlowController/src/view/pop/PopFactory.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var MessageBoxRemakePop_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/MessageBoxRemakePop.ts");
        var SubmitterMask_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/SubmitterMask.ts");
        var MulSubmitDialog_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/pop/MulSubmitDialog.ts");
        var PopWin = function() {
            function PopWin() {}
            PopWin.prototype.init = function(context) {
                this.mContext = context;
                if (!this.mulSubmitDialog) {
                    this.mulSubmitDialog = new MulSubmitDialog_1.default(this.mContext);
                    this.mulSubmitDialog.create();
                }
                if (!this.submitterMask) {
                    this.submitterMask = new SubmitterMask_1.SubmitterMask(this.mContext);
                }
                MessageBoxRemakePop_1.MessageBoxRemakePop.init(this.mContext);
            };
            PopWin.prototype.get = function(type) {
                if (type === "msgRmk") {
                    return MessageBoxRemakePop_1.MessageBoxRemakePop;
                } else if (type === "mulMsgRmk") {
                    return this.mulSubmitDialog;
                } else if (type === "submitter") {
                    return this.submitterMask;
                }
                return null;
            };
            PopWin.prototype.destroy = function() {
                MessageBoxRemakePop_1.MessageBoxRemakePop.destroy();
                if (this.mulSubmitDialog) {
                    this.mulSubmitDialog.destroy();
                    this.mulSubmitDialog = null;
                }
                if (this.submitterMask) {
                    this.submitterMask.destroy();
                    this.submitterMask = null;
                }
            };
            return PopWin;
        }();
        var PopFactory = new PopWin;
        exports.PopFactory = PopFactory;
    },
    "./presenters/AnswerFlowController/src/view/pop/SubmitterMask.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var SubmitterMask = function() {
            function SubmitterMask(mContext) {
                this.mContext = mContext;
                this.toast = null;
            }
            SubmitterMask.prototype.show = function(param) {
                this.hide();
                this.toast = MessageBoxRemake.commonToast($(this.mContext.View).find(".submiiter_container"), {
                    text: this.mContext.getLangText("listen"),
                    hidetime: "infinite",
                    customBoxClass: "student_listen"
                });
            };
            SubmitterMask.prototype.hide = function() {
                if (this.toast && this.toast.hide) {
                    this.toast.hide();
                }
            };
            SubmitterMask.prototype.destroy = function() {
                this.hide();
            };
            return SubmitterMask;
        }();
        exports.SubmitterMask = SubmitterMask;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/BackOriginalBtn.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts");
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var QuestionState_1 = __webpack_require__("./presenters/AnswerFlowController/src/flows/common/QuestionState.ts");
        var LANG_KEY_BACK_ORIGINAL = "back_original";
        var DATA = {
            id: "_bar_back_original",
            text: "",
            order: 20,
            hidden: true,
            actived: false,
            style: "ndui-btn-square send_to_student",
            activedStyle: "",
            handler: $.noop
        };
        var BackOriginalBtn = function(_super) {
            __extends(BackOriginalBtn, _super);
            function BackOriginalBtn(mode, option) {
                var _this = _super.call(this, mode) || this;
                var that = _this;
                _this.data = $.extend(true, {}, DATA, option);
                _this.data.text = mode.getContext().getLangText(LANG_KEY_BACK_ORIGINAL);
                _this.data.handler = function() {
                    that.backOriginal();
                };
                return _this;
            }
            BackOriginalBtn.prototype.changeState = function(key, val) {
                _super.prototype.changeState.call(this, key, val);
                this.mContext.QuestionMode.commit(ConstVar_1.INTERNAL_EVENT_NAME.QUESTION_STATUS_CHANGE, val);
            };
            BackOriginalBtn.prototype.backOriginal = function() {
                this.changeState("hidden", true);
                this.mode.setBarState(ConstVar_1.BAR_TYPE.SEND, "hidden", false);
                this.mode.setBarState(ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER, "hidden", !this.mContext.QuestionOperate.hasCorrectOrKeyAnswer());
                QuestionState_1.default.resetTeacher(this.mode.getContext());
                this.mContext.SubmitButtonOperate.setVisible(true);
                this.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
            };
            return BackOriginalBtn;
        }(BaseItem_1.default);
        exports.default = BackOriginalBtn;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts": function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem = function() {
            function BaseItem(mode) {
                this.mode = mode;
                this.mContext = this.mode.getContext();
                this.logger = this.mContext.Logger;
            }
            BaseItem.prototype.changeState = function(key, val) {
                if (this.data[key] !== undefined) {
                    this.data[key] = val;
                    return true;
                }
                return false;
            };
            BaseItem.prototype.getState = function(key) {
                if (!key) {
                    return this.data;
                } else if (this.data[key] !== undefined) {
                    return this.data[key];
                }
            };
            BaseItem.prototype.fire = function() {
                if (typeof this.data.handler === "function") {
                    this.data.handler();
                }
            };
            return BaseItem;
        }();
        exports.default = BaseItem;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/QBagCorrectAnswerBtn.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts");
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var LANG_KEY = "bag_show_answer";
        var DATA = {
            id: "_bar_showanser",
            text: "公布答案",
            order: 20,
            hidden: false,
            actived: false,
            style: "ndui-btn-square square_tool_result",
            activedStyle: "",
            handler: $.noop
        };
        var QBagCorrectAnswerBtn = function(_super) {
            __extends(QBagCorrectAnswerBtn, _super);
            function QBagCorrectAnswerBtn(mode, option) {
                var _this = _super.call(this, mode) || this;
                var that = _this;
                _this.data = $.extend(true, {}, DATA, option);
                _this.data.text = that.mode.getContext().getLangText(LANG_KEY);
                _this.data.handler = function() {
                    if (!that.data.hidden) {
                        that.mContext.TimerOperate.stop();
                        that.mContext.QuestionOperate.showAnswer("correct");
                        that.mContext.QuestionOperate.changeState({
                            finishQuestion: {}
                        });
                        that.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.FINISH;
                    }
                    that.data.hidden = true;
                };
                return _this;
            }
            return QBagCorrectAnswerBtn;
        }(BaseItem_1.default);
        exports.default = QBagCorrectAnswerBtn;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/QBagReturnBtn.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts");
        var LANG_KEY = "bag_return";
        var DATA = {
            id: "_bar_bag_closewin",
            text: "返回抽题",
            order: 20,
            hidden: false,
            actived: false,
            style: "ndui-btn-square square_tool_treasure",
            activedStyle: "",
            handler: $.noop
        };
        var QBagReturnBtn = function(_super) {
            __extends(QBagReturnBtn, _super);
            function QBagReturnBtn(mode, option) {
                var _this = _super.call(this, mode) || this;
                _this.data = $.extend(true, {}, DATA, option);
                _this.data.text = mode.getContext().getLangText(LANG_KEY);
                _this.data.handler = function() {
                    if (CoursePlayer && CoursePlayer.close) {
                        mode.getContext().Logger.debug("Call CoursePlayer Method close()");
                        CoursePlayer.close();
                    } else {
                        mode.getContext().Logger.debug("CoursePlayer not exists or is NULL!");
                    }
                };
                return _this;
            }
            return QBagReturnBtn;
        }(BaseItem_1.default);
        exports.default = QBagReturnBtn;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/SendQuestionBtn.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts");
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var LANG_KEY = "send_task";
        var SENDING_STYLE = "ndui-btn-square send_to_student js_send_to_student click_disabled";
        var NO_STUDENT_STYLE = "ndui-btn-square send_to_student js_send_to_student none_link";
        var DATA = {
            id: "_bar_send_question",
            text: "",
            order: 20,
            hidden: false,
            actived: false,
            style: "ndui-btn-square send_to_student js_send_to_student",
            activedStyle: "",
            enable: true,
            handler: $.noop
        };
        var PUSH_STATUS = "PLAYER.GLOBAL.PUSH_STATUS";
        var SendQuestionBtn = function(_super) {
            __extends(SendQuestionBtn, _super);
            function SendQuestionBtn(mode, option) {
                var _this = _super.call(this, mode) || this;
                _this.sendingState = false;
                var that = _this;
                _this.data = $.extend(true, {}, DATA, option);
                _this.data.text = mode.getContext().getLangText(LANG_KEY);
                _this.data.handler = function() {
                    that.onSendQuestion();
                };
                _this.data.enable = icCreatePlayer.detector.isOnline();
                _this.updateStyle();
                _this.onStudentOnlineStatusChange();
                _this.init();
                return _this;
            }
            SendQuestionBtn.prototype.init = function() {
                if (this.mContext.__interface) {
                    this.mContext.__interface.asSendQuestionSuccess = this.exerciseStartSuccess.bind(this);
                    this.mContext.__interface.asSendQuestionFail = this.exerciseStartFailure.bind(this);
                }
            };
            SendQuestionBtn.prototype.changeState = function(key, val) {
                _super.prototype.changeState.call(this, key, val);
                this.updateStyle();
                this.sendingState = !this.data.enable;
                this.mContext.QuestionMode.commit(ConstVar_1.INTERNAL_EVENT_NAME.QUESTION_STATUS_CHANGE, val);
            };
            SendQuestionBtn.prototype.updateStyle = function() {
                if (this.data.text === this.mode.getContext().getLangText(LANG_KEY)) {
                    if (this.data.enable === true) {
                        this.data.style = DATA.style;
                    } else {
                        this.data.style = NO_STUDENT_STYLE;
                    }
                } else {
                    this.data.style = DATA.style;
                }
            };
            SendQuestionBtn.prototype.onStudentOnlineStatusChange = function() {
                var that = this;
                if (window.player) {
                    window.player.getController().getPlayerEvent().addEventListener(PUSH_STATUS, (function(eventName, eventData) {
                        if (eventData) {
                            that.data.enable = eventData.status;
                            that.updateStyle();
                        }
                    }));
                }
            };
            SendQuestionBtn.prototype.onSendQuestion = function() {
                if (this.sendingState === true) {
                    return;
                }
                if (this.data.style !== NO_STUDENT_STYLE) {
                    this.data.style = SENDING_STYLE;
                }
                var sceneParam = CoursePlayer.pptInvokeMethod("live_terminal", "{}") ? JSON.parse(CoursePlayer.pptInvokeMethod("live_terminal", "{}")) : undefined;
                var live_terminal = sceneParam ? sceneParam.live_terminal : "";
                if (live_terminal === "student") {
                    return;
                }
                this.sendingState = true;
                this.mContext.PlayerController.startFlow(ConstVar_1.CLASSROOM_EVENT_NAME.AS_SEND_QUESTION, {
                    op: "send"
                });
            };
            SendQuestionBtn.prototype.exerciseStartSuccess = function() {
                this.updateStyle();
                this.data.hidden = true;
                this.mode.hideToolbar();
                this.sendingState = false;
            };
            SendQuestionBtn.prototype.exerciseStartFailure = function() {
                this.updateStyle();
                this.data.hidden = false;
                this.sendingState = false;
            };
            return SendQuestionBtn;
        }(BaseItem_1.default);
        exports.default = SendQuestionBtn;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/ShowAnalysisBtn.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts");
        var LANG_KEY = "show_analysis";
        var DATA = {
            id: "_bar_show_analysis",
            text: "查看解析",
            order: 20,
            hidden: false,
            actived: false,
            style: "ndui-btn-square square_tool_analysis",
            activedStyle: "",
            handler: $.noop
        };
        var ShowAnalysisBtn = function(_super) {
            __extends(ShowAnalysisBtn, _super);
            function ShowAnalysisBtn(mode, option) {
                var _this = _super.call(this, mode) || this;
                var that = _this;
                _this.data = $.extend(true, {}, DATA, option);
                _this.data.text = that.mode.getContext().getLangText(LANG_KEY);
                _this.data.handler = function() {
                    that.mode.getContext().QuestionOperate.setAnalysisVisible(true);
                };
                return _this;
            }
            return ShowAnalysisBtn;
        }(BaseItem_1.default);
        exports.default = ShowAnalysisBtn;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/ShowCorrectAnswerBtn.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts");
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var LANG_KEY = "show_correct_answer";
        var DATA = {
            id: "_bar_show_correct_anser",
            text: "查看答案",
            order: 20,
            hidden: false,
            actived: false,
            style: "ndui-btn-square square_tool_answer",
            activedStyle: "",
            handler: $.noop
        };
        var ShowCorrectAnswerBtn = function(_super) {
            __extends(ShowCorrectAnswerBtn, _super);
            function ShowCorrectAnswerBtn(mode, option) {
                var _this = _super.call(this, mode) || this;
                var that = _this;
                _this.data = $.extend(true, {}, DATA, option);
                _this.data.text = that.mode.getContext().getLangText(LANG_KEY);
                _this.data.handler = _this.handler.bind(_this);
                return _this;
            }
            ShowCorrectAnswerBtn.prototype.handler = function() {
                var that = this;
                if (!that.data.hidden) {
                    that.mContext.QuestionOperate.lock();
                    that.mContext.QuestionOperate.showAnswer("correct");
                    that.mContext.TimerOperate.stop();
                    that.mContext.State.questionState = ConstVar_1.QUESTION_STATE_CODE.CAN_SUBMIT;
                    that.mode.setBarState(ConstVar_1.BAR_TYPE.BACK_ORIGINAL, "hidden", false);
                    that.mode.setBarState(ConstVar_1.BAR_TYPE.SEND, "hidden", true);
                    that.mContext.SubmitButtonOperate.setVisible(false);
                }
                that.data.hidden = true;
                that.mContext.dispatchEvent(ConstVar_1.CLASSROOM_EVENT_NAME.SHOW_CORRECT_ANSWER, ConstVariable.PresenterEventType.IC_PLAYER_EVENT, null);
            };
            return ShowCorrectAnswerBtn;
        }(BaseItem_1.default);
        exports.default = ShowCorrectAnswerBtn;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/ShowHintBtn.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var BaseItem_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BaseItem.ts");
        var LANG_KEY = "show_hint";
        var DATA = {
            id: "_bar_show_hint",
            text: "查看提示",
            order: 20,
            hidden: false,
            actived: false,
            style: "ndui-btn-square square_tool_tips",
            activedStyle: "",
            handler: $.noop
        };
        var ShowHintBtn = function(_super) {
            __extends(ShowHintBtn, _super);
            function ShowHintBtn(mode, option) {
                var _this = _super.call(this, mode) || this;
                var that = _this;
                _this.data = $.extend(true, {}, DATA, option);
                _this.data.text = that.mode.getContext().getLangText(LANG_KEY);
                _this.data.handler = function() {
                    that.mode.getContext().QuestionOperate.setHintVisible(true);
                };
                return _this;
            }
            return ShowHintBtn;
        }(BaseItem_1.default);
        exports.default = ShowHintBtn;
    },
    "./presenters/AnswerFlowController/src/view/toolbar/Toolbar.ts": function(module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var SendQuestionBtn_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/SendQuestionBtn.ts");
        var QBagReturnBtn_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/QBagReturnBtn.ts");
        var QBagCorrectAnswerBtn_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/QBagCorrectAnswerBtn.ts");
        var ConstVar_1 = __webpack_require__("./presenters/AnswerFlowController/src/utils/ConstVar.ts");
        var ShowAnalysisBtn_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/ShowAnalysisBtn.ts");
        var ShowCorrectAnswerBtn_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/ShowCorrectAnswerBtn.ts");
        var ShowHintBtn_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/ShowHintBtn.ts");
        var BackOriginalBtn_1 = __webpack_require__("./presenters/AnswerFlowController/src/view/toolbar/BackOriginalBtn.ts");
        var Toolbar = function() {
            function Toolbar(mode, option) {
                this.mode = mode;
                this.mContext = mode.getContext();
                this.option = $.extend(true, {
                    side: "both"
                }, option);
                this.items = [];
            }
            Toolbar.prototype.init = function() {
                this.initMembers();
                this.mount();
            };
            Toolbar.prototype.initMembers = function() {
                var items = this.option.items, btnType, btn;
                for (btnType in items) {
                    btn = items[btnType];
                    if (items.hasOwnProperty(btnType)) {
                        this.items[btnType] = this.barFactory(btnType, btn);
                    }
                }
            };
            Toolbar.prototype.barFactory = function(key, option) {
                var btn;
                switch (key) {
                  case ConstVar_1.BAR_TYPE.SEND:
                    btn = new SendQuestionBtn_1.default(this.mode, option);
                    break;

                  case ConstVar_1.BAR_TYPE.QB_RETURN:
                    btn = new QBagReturnBtn_1.default(this.mode, option);
                    break;

                  case ConstVar_1.BAR_TYPE.QB_SHOW_CORRECT:
                    btn = new QBagCorrectAnswerBtn_1.default(this.mode, option);
                    break;

                  case ConstVar_1.BAR_TYPE.SHOW_ANALYSIS:
                    btn = new ShowAnalysisBtn_1.default(this.mode, option);
                    break;

                  case ConstVar_1.BAR_TYPE.SHOW_CORRECT_ANSWER:
                    btn = new ShowCorrectAnswerBtn_1.default(this.mode, option);
                    break;

                  case ConstVar_1.BAR_TYPE.SHOW_HINT:
                    btn = new ShowHintBtn_1.default(this.mode, option);
                    break;

                  case ConstVar_1.BAR_TYPE.BACK_ORIGINAL:
                    btn = new BackOriginalBtn_1.default(this.mode, option);
                    break;
                }
                return btn;
            };
            Toolbar.prototype.mount = function() {
                var members = [];
                for (var key in this.items) {
                    if (this.items.hasOwnProperty(key)) {
                        members.push(this.items[key].data);
                    }
                }
                var cls = "k12-footer-tool";
                if (this.mContext.QuestionOperate.getInfo().type_code === "mindjet") {
                    cls = "mindmap-footer-tool " + cls;
                }
                this.component = new Vue({
                    template: '<toolbar  :members="members"  :side="side" sound-style="' + this.mContext.Option.skin + '"  class="' + cls + '"/>',
                    components: {
                        toolbar: __ModuleComponent.Toolbar
                    },
                    data: {
                        members: members,
                        side: this.option.side
                    }
                });
                var $replaceEl = $("<div></div>");
                this.option.containerEl.append($replaceEl);
                this.component.$mount($replaceEl[0]);
            };
            Toolbar.prototype.changeState = function(btn, key, val) {
                this.mContext.Logger.debug("变更按钮状态", btn, key, val);
                var item = this.items[btn];
                if (item) {
                    item.changeState(key, val);
                }
            };
            Toolbar.prototype.getState = function(btn, key) {
                var item = this.items[btn];
                if (item) {
                    return item.getState(key);
                }
            };
            Toolbar.prototype.fire = function(btn) {
                var item = this.items[btn];
                if (item) {
                    item.fire();
                }
            };
            Toolbar.prototype.hide = function() {
                for (var key in this.items) {
                    if (this.items.hasOwnProperty(key)) {
                        if (this.items[key]) {
                            this.items[key].changeState("hidden", true);
                        }
                    }
                }
            };
            return Toolbar;
        }();
        exports.default = Toolbar;
    },
    "@sdp.nd/co-global": function(module, exports) {
        (function() {
            module.exports = window["window"];
        })();
    }
})["default"];
//# sourceMappingURL=AddonAnswerFlowController_create.js.map]]></presenter>
    <resources>
    </resources>
</addon>
